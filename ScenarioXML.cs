using System.Reflection;
using System.Xml.Serialization;

namespace P3D_Scenario_Generator
{
    public class ScenarioXML
    {
		private static readonly SimBaseDocumentXML simBaseDocumentXML = new();

		static internal void GenerateXMLfile()
		{
			SetSimbaseDocumentXML();
			SetWorldBaseFlightXML();
			WriteXML();
		}

		static private void SetSimbaseDocumentXML()
        {
			simBaseDocumentXML.Type = "MissionFile";
			simBaseDocumentXML.Descr = $"This is a {Parameters.SelectedScenario} scenario generated by {Constants.appTitle}. Estimated time to complete: {ScenarioHTML.GetDuration()} minutes.";
			simBaseDocumentXML.Title = $"{ScenarioHTML.overview.Title}";
			WorldBaseFlight worldBaseFlight = new();
			simBaseDocumentXML.WorldBaseFlight = worldBaseFlight;
        }

		static private void SetWorldBaseFlightXML()
		{
			SetFirstPassObects();
			SetSecondPassObjects();
			SetThirdPassObjects();
			SetFourthPassObjects();
			SetFifthPassObjects();
			SetSixthPassObjects();
		}

		static private void SetFirstPassObects()
        {
			SetCylinderArea();
			SetDialogAction();
			SetDisabledTrafficAirports();
			SetGoal();
			SetLibraryObject();
			SetOneShotSoundAction();
			SetRealismOverrides();
			SetRectangleArea();
			SetScaleformPanelWindow();
			SetScenarioMetadata();
			SetScenarioVariable();
			SetScriptAction();
		}

		static private void SetSecondPassObjects()
		{
			SetGoalResolutionAction();
			SetObjectActivationAction();
			SetPointOfInterest();
			SetWindowActions();
		}

		static private void SetThirdPassObjects()
        {
			SetAirportLandingTrigger();
			SetPointOfInterestActivationAction();
			SetTimerTrigger();
		}

		static private void SetFourthPassObjects()
        {
			SetAirportLandingTriggerActivation();
			SetProximityTrigger();
		}

		static private void SetFifthPassObjects()
        {
			SetLastEventLandingTrigger();
			SetProximityTriggerActivationAction();
        }

		static private void SetSixthPassObjects()
        {
			SetProximityTriggerOnEnterAction();
			SetTimerTriggerFirstEvent();
        }

		#region First pass object creation

		static private void SetCylinderArea()
		{
			List<SimMissionCylinderArea> caList = [];
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.PhotoTour):
					SetPhotoTourCylinderAreas(caList);
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionCylinderArea = caList;
		}

		static private void SetDialogAction()
        {
			List<SimMissionDialogAction> daList = [];
			switch (Parameters.SelectedScenario)
            {
				case nameof(ScenarioTypes.Circuit):
				case nameof(ScenarioTypes.PhotoTour):
				case nameof(ScenarioTypes.SignWriting):
					daList.Add(new SimMissionDialogAction("Dialog_Intro_01", ScenarioHTML.overview.Briefing, "2", "Text-To-Speech", GetGUID()));
					daList.Add(new SimMissionDialogAction("Dialog_Intro_02", ScenarioHTML.overview.Tips, "2", "Text-To-Speech", GetGUID()));
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionDialogAction = daList;
		}

		static private void SetDisabledTrafficAirports()
		{
			SimMissionDisabledTrafficAirports ta = new();
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
				case nameof(ScenarioTypes.PhotoTour):
				case nameof(ScenarioTypes.SignWriting):
					ta.AirportIdent = $"{Runway.IcaoId}";
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionDisabledTrafficAirports = ta;
		}

		static private void SetGoal()
		{
			List<SimMissionGoal> gList = [];
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
				case nameof(ScenarioTypes.PhotoTour):
				case nameof(ScenarioTypes.SignWriting):
					gList.Add(new SimMissionGoal("Goal_01", ScenarioHTML.overview.Objective, GetGUID()));
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionGoal = gList;
		}

		static private void SetLibraryObject()
		{
			List<SceneryObjectsLibraryObject> loList = [];
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
				case nameof(ScenarioTypes.SignWriting):
					SetGateLibraryObjects(loList);
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SceneryObjectsLibraryObject = loList;
		}

		static private void SetOneShotSoundAction()
		{
			List<SimMissionOneShotSoundAction> saList = [];
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
				case nameof(ScenarioTypes.PhotoTour):
				case nameof(ScenarioTypes.SignWriting):
					saList.Add(new SimMissionOneShotSoundAction("OneShotSound_ThruHoop_01", "ThruHoop.wav", GetGUID()));
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionOneShotSoundAction = saList;
		}

		static private void SetRealismOverrides()
		{
			SimMissionRealismOverrides ro = new()
            {
				Descr = "RealismOverrides",
				UserTips = "UserSpecified",
				CrashBehavior = "UserSpecified",
				ATCMenuDisabled = "False",
				FlightRealism = "UserSpecified",
				WorldRealism = "UserSpecified",
				AircraftLabels = "UserSpecified",
				AvatarNoCollision = "UserSpecified",
				UnlimitedFuel = "UserSpecified"
			};
			simBaseDocumentXML.WorldBaseFlight.SimMissionRealismOverrides = ro;
		}

		static private void SetRectangleArea()
		{
			List<SimMissionRectangleArea> raList = [];
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
				case nameof(ScenarioTypes.SignWriting):
					SetGateRectangleAreas(raList);
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionRectangleArea = raList;
		}

		static private void SetScaleformPanelWindow()
		{
			List<SimMissionScaleformPanelWindow> spwList = [];
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.PhotoTour):
					SetPhotoTourScaleformPanelWindow(spwList);
					break;
				case nameof(ScenarioTypes.SignWriting):
					SetSignWritingScaleformPanelWindow(spwList);
					break;
				case nameof(ScenarioTypes.Celestial):
					SetCelestialSextantScaleformPanelWindow(spwList);
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow = spwList;
		}

		static private void SetScenarioMetadata()
		{
			SimMissionUIScenarioMetadata md = new()
            {
				InstanceId = GetGUID(),
				SkillLevel = ScenarioHTML.overview.Difficulty,
				LocationDescr = $"{Runway.IcaoName} ({Runway.IcaoId}) {Runway.City}, {Runway.Country}",
				DifficultyLevel = 1,
				EstimatedTime = ScenarioHTML.GetDuration(),
				UncompletedImage = "images\\imgM_i.bmp",
				CompletedImage = "images\\imgM_c.bmp",
				ExitMissionImage = "images\\exitMission.bmp",
				MissionBrief = "Overview.htm",
				AbbreviatedMissionBrief = $"{Path.GetFileNameWithoutExtension(Parameters.SaveLocation)}.htm",
				SuccessMessage = $"Success! You completed the \"{Parameters.SelectedScenario}\" scenario objectives.",
				FailureMessage = $"Better luck next time! You failed to complete the \"{Parameters.SelectedScenario}\" scenario objectives.",
				UserCrashMessage = $"Yikes! You crashed and therefore failed the \"{Parameters.SelectedScenario}\" scenario objectives."
			};
			simBaseDocumentXML.WorldBaseFlight.SimMissionUIScenarioMetadata = md;
		}

		static private void SetScenarioVariable()
		{
			List<SimMissionScenarioVariable> svList = [];
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.SignWriting):
					SetSignWritingScenarioVariables(svList);
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionScenarioVariable = svList;
		}

		static private void SetScriptAction()
		{
			List<SimMissionScriptAction> saList = [];
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.SignWriting):
					SetSignWritingScriptActions(saList);
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionScriptAction = saList;
		}
		#endregion

		#region Second pass object creation/editing

		// Requires 1st pass SetGoal()
		static private void SetGoalResolutionAction()
		{
			List<SimMissionGoalResolutionAction> graList = [];
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
				case nameof(ScenarioTypes.PhotoTour):
				case nameof(ScenarioTypes.SignWriting):
					string search = "Goal_01";
					int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionGoal.FindIndex(g => g.Descr == search);
					List<ObjectReference> orList =
                    [
                        new ObjectReference(simBaseDocumentXML.WorldBaseFlight.SimMissionGoal[idIndex].InstanceId)
					];
					SimMissionGoalResolutionAction gra = new()
                    {
						Descr = "Resolve_Goal_01",
						GoalResolution = "Completed",
						InstanceId = GetGUID(),
						Goals = new Goals(orList)
					};
					graList.Add(gra);
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionGoalResolutionAction = graList;
		}

		// Requires 1st pass SetLibraryObject()
		static private void SetObjectActivationAction()
		{
			List<SimMissionObjectActivationAction> oaaList = [];
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
				case nameof(ScenarioTypes.SignWriting):
					SetGateObjectActivations(Constants.genGameHoopNumActiveDesc, oaaList, "Activate_Hoop_Active_0", "True");
					SetGateObjectActivations(Constants.genGameHoopNumActiveDesc, oaaList, "Deactivate_Hoop_Active_0", "False");
					SetGateObjectActivations(Constants.genGameHoopNumInactiveDesc, oaaList, "Activate_Hoop_Inactive_0", "True");
					SetGateObjectActivations(Constants.genGameHoopNumInactiveDesc, oaaList, "Deactivate_Hoop_Inactive_0", "False");
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction = oaaList;
		}

		// Requires 1st pass SetLibraryObject()
		static private void SetPointOfInterest()
		{
			List<SimMissionPointOfInterest> poiList = [];
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
				case nameof(ScenarioTypes.SignWriting):
					SetGatePointOfInterestObjects(poiList);
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionPointOfInterest = poiList;
		}

		// Requires 1st pass SetScaleformPanelWindow()
		static private void SetWindowActions()
		{
			List<SimMissionOpenWindowAction> owaList = [];
			List<SimMissionCloseWindowAction> cwaList = [];
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.PhotoTour):
					SetPhotoTourOpenWindowActionObjects(owaList);
					SetPhotoTourCloseWindowActionObjects(cwaList);
					break;
				case nameof(ScenarioTypes.SignWriting):
					SetSignWritingOpenWindowActionObjects(owaList);
					SetSignWritingCloseWindowActionObjects(cwaList);
					break;
				case nameof(ScenarioTypes.Celestial):
					SetCelestialOpenWindowActionObjects(owaList);
					SetCelestialCloseWindowActionObjects(cwaList);
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionOpenWindowAction = owaList;
			simBaseDocumentXML.WorldBaseFlight.SimMissionCloseWindowAction = cwaList;
		}

		#endregion

		#region Third pass object creation/editing

		// Requires 2nd pass SetGoalResolutionAction()
		static private void SetAirportLandingTrigger()
		{
			List<SimMissionAirportLandingTrigger> altList = [];
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
				case nameof(ScenarioTypes.SignWriting):
					RunwayFilter rf = new("Runway_Filter_01", Runway.Number, Runway.Designator);
					List<ObjectReference> orList = [];
					SetGoalResolutionReference("Resolve_Goal_0X", 1, orList);
					Actions a = new(orList);
					SimMissionAirportLandingTrigger alt = new()
                    {
						InstanceId = GetGUID(),
						Descr = "Airport_Landing_Trigger_01",
						Activated = "False",
						AirportIdent = Runway.IcaoId,
						RunwayFilter = rf,
						Actions = a
					};
					altList.Add(alt);
					break;
				case nameof(ScenarioTypes.PhotoTour):
					orList = [];
					SetGoalResolutionReference("Resolve_Goal_0X", 1, orList);
					SetCloseWindowActionReference("Close_Scaleform_Panel_Window_Leg_X", PhotoTour.PhotoCount - 1, orList);
					SetCloseWindowActionReference("Close_Scaleform_Panel_Window_Photo_X", PhotoTour.PhotoCount - 2, orList);
					a = new Actions(orList);
					string[] words = Parameters.PhotoDestRunway.Split("\t");
					alt = new SimMissionAirportLandingTrigger
					{
						InstanceId = GetGUID(),
						Descr = "Airport_Landing_Trigger_01",
						Activated = "False",
						AirportIdent = words[0],
						Actions = a
					};
					altList.Add(alt);
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger = altList;
		}

		// Requires 2nd pass SetPointOfInterest()
		static private void SetPointOfInterestActivationAction()
		{
			List<SimMissionPointOfInterestActivationAction> paaList = [];

			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
				case nameof(ScenarioTypes.SignWriting):
					SetGatePOIactivationActions(paaList, $"Activate_POI_Gate_0X", "True");
					SetGatePOIactivationActions(paaList, $"DeActivate_POI_Gate_0X", "False");
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionPointOfInterestActivationAction = paaList;
		}

		// Requires 2nd pass SetObjectActivationAction()
		static private void SetTimerTrigger()
		{
			List<SimMissionTimerTrigger> ttList = [];
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
					List<ObjectReference> orCircuitList = [];
					SetObjectActivationReference("Activate_Hoop_Active_0X", 1, orCircuitList);
					SetObjectActivationReference("Deactivate_Hoop_Inactive_0X", 1, orCircuitList);
					SetPOIactivationActionReference("Activate_POI_Gate_0X", 1, orCircuitList);
					SetDialogReference("Dialog_Intro_0X", 1, orCircuitList);
					SetDialogReference("Dialog_Intro_0X", 2, orCircuitList);
					SimMissionTimerTrigger circuitTT = new()
                    {
						InstanceId = GetGUID(),
						Descr = "Timer_Trigger_01",
						StopTime = 1.0,
						Activated = "True",
						Actions = new Actions(orCircuitList)
					};
					ttList.Add(circuitTT);
					break;
				case nameof(ScenarioTypes.PhotoTour):
					List<ObjectReference> orPhotoList = [];
					SetOpenWindowActionReference("Open_Scaleform_Panel_Window_Leg_X", 1, orPhotoList);
					SetDialogReference("Dialog_Intro_0X", 1, orPhotoList);
					SetDialogReference("Dialog_Intro_0X", 2, orPhotoList);
					SimMissionTimerTrigger photoTT = new()
                    {
						InstanceId = GetGUID(),
						Descr = "Timer_Trigger_01",
						StopTime = 1.0,
						Activated = "True",
						Actions = new Actions(orPhotoList)
					};
					ttList.Add(photoTT);
					break;
				case nameof(ScenarioTypes.SignWriting):
					List<ObjectReference> orSignList = [];
					SetOpenWindowActionReference("Open_Scaleform_Panel_Window_SignWriting", 1, orSignList);
					SetObjectActivationReference("Activate_Hoop_Active_0X", 1, orSignList);
					SetObjectActivationReference("Activate_Hoop_Inactive_0X", 2, orSignList);
					SetPOIactivationActionReference("Activate_POI_Gate_0X", 1, orSignList);
					SetDialogReference("Dialog_Intro_0X", 1, orSignList);
					SetDialogReference("Dialog_Intro_0X", 2, orSignList);
					SimMissionTimerTrigger signTT = new()
                    {
						InstanceId = GetGUID(),
						Descr = "Timer_Trigger_01",
						StopTime = 1.0,
						Activated = "True",
						Actions = new Actions(orSignList)
					}; 
					ttList.Add(signTT);
					break;
				case nameof(ScenarioTypes.Celestial):
					List<ObjectReference> orCelestialList = [];
					SetOpenWindowActionReference("Open_Scaleform_Panel_Window_CelestialSextant", 1, orCelestialList);
					SimMissionTimerTrigger celestialTT = new()
                    {
						InstanceId = GetGUID(),
						Descr = "Timer_Trigger_01",
						StopTime = 1.0,
						Activated = "True",
						Actions = new Actions(orCelestialList)
					};
					ttList.Add(celestialTT);
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionTimerTrigger = ttList;
		}

		#endregion

		#region Fourth pass object creation/editing

		// Requires 3rd pass SetAirportLandingTrigger()
		static private void SetAirportLandingTriggerActivation()
		{
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
				case nameof(ScenarioTypes.PhotoTour):
				case nameof(ScenarioTypes.SignWriting):
					string search = "Airport_Landing_Trigger_01";
					int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger.FindIndex(alt => alt.Descr == search);
					ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger[idIndex].InstanceId);
					List<ObjectReference> orList =
                    [
                        or
					];
					SimMissionObjectActivationAction oaa = new()
                    {
						InstanceId = GetGUID(),
						Descr = "Activate_Airport_Landing_Trigger_01",
						NewObjectState = "True",
						ObjectReferenceList = new ObjectReferenceList(orList)
					};
					simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction.Add(oaa);
					break;
				default:
					break;
			}
		}

		// Requires 3rd pass SetPointOfInterestActivationAction()
		static private void SetProximityTrigger()
		{
			List<SimMissionProximityTrigger> ptList = [];
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
					for (int index = 0; index < Gates.GateCount; index++)
					{
						List<ObjectReference> orAreaList = [];
						SetRectangleAreaReference("Area_Hoop_0X", index + 1, orAreaList);
						Areas a = new(orAreaList);
						List<ObjectReference> orActionList = [];
						SetObjectActivationReference("Activate_Hoop_Inactive_0X", index + 1, orActionList);
						SetObjectActivationReference("Deactivate_Hoop_Active_0X", index + 1, orActionList);
						SetPOIactivationActionReference("DeActivate_POI_Gate_0X", index + 1, orActionList);
						if (index + 1 < Gates.GateCount)
						{
							SetObjectActivationReference("Activate_Hoop_Active_0X", index + 2, orActionList);
							SetObjectActivationReference("Deactivate_Hoop_Inactive_0X", index + 2, orActionList);
							SetPOIactivationActionReference("Activate_POI_Gate_0X", index + 2, orActionList);
						}
						SetSoundAction("OneShotSound_ThruHoop_0X", 1, orActionList);
						OnEnterActions oea = new(orActionList);
						SimMissionProximityTrigger pt = new()
                        {
							InstanceId = GetGUID(),
							Descr = $"Proximity_Trigger_0{index + 1}",
							Activated = "False",
							Areas = a,
							OnEnterActions = oea
						};
						ptList.Add(pt);
					}
					break;
				case nameof(ScenarioTypes.PhotoTour):
					for (int index = 1; index < PhotoTour.PhotoCount - 1; index++)
					{
						List<ObjectReference> orAreaList = [];
						SetCylinderAreaReference("Area_Cylinder_X", index, orAreaList);
						Areas a = new(orAreaList);
						List<ObjectReference> orActionList = [];
						if (index > 1)
						{
							SetCloseWindowActionReference("Close_Scaleform_Panel_Window_Photo_X", index - 1, orActionList);
						}
						SetCloseWindowActionReference("Close_Scaleform_Panel_Window_Leg_X", index, orActionList);
						SetOpenWindowActionReference("Open_Scaleform_Panel_Window_Leg_X", index + 1, orActionList);
						SetOpenWindowActionReference("Open_Scaleform_Panel_Window_Photo_X", index, orActionList);
						SetSoundAction("OneShotSound_ThruHoop_0X", 1, orActionList);
						OnEnterActions oea = new(orActionList);
						SimMissionProximityTrigger pt = new()
                        {
							InstanceId = GetGUID(),
							Descr = $"Proximity_Trigger_0{index}",
							Activated = "False",
							Areas = a,
							OnEnterActions = oea
						};
						ptList.Add(pt);
					}
					break;
				case nameof(ScenarioTypes.SignWriting):
					for (int index = 0; index < Gates.GateCount; index++)
					{
						List<ObjectReference> orAreaList = [];
						SetRectangleAreaReference("Area_Hoop_0X", index + 1, orAreaList);
						Areas a = new(orAreaList);
						List<ObjectReference> orActionList = [];
						// Increment gate number scenario variable
						SetScriptActionReference("Increment gate number script", orActionList);
						// First of gate pair marking a segment
						if (index % 2 == 0)
						{
							// Turn smoke on
							SetScriptActionReference("Smoke on/off script", orActionList);
							// Make segment start gate inactive
							SetObjectActivationReference("Activate_Hoop_Inactive_0X", index + 1, orActionList);
							SetObjectActivationReference("Deactivate_Hoop_Active_0X", index + 1, orActionList);
							SetPOIactivationActionReference("DeActivate_POI_Gate_0X", index + 1, orActionList);
							// Make segment end gate active
							SetObjectActivationReference("Activate_Hoop_Active_0X", index + 2, orActionList);
							SetObjectActivationReference("Deactivate_Hoop_Inactive_0X", index + 2, orActionList);
							SetPOIactivationActionReference("Activate_POI_Gate_0X", index + 2, orActionList);
						}
						// Second of gate pair marking a segment
						else
						{
							// Turn smoke off
							SetScriptActionReference("Smoke on/off script", orActionList);
							// Hide current inactive segment start gate
							SetObjectActivationReference("Deactivate_Hoop_Inactive_0X", index, orActionList);
							// Hide current active segment end gate
							SetObjectActivationReference("Deactivate_Hoop_Active_0X", index + 1, orActionList);
							SetPOIactivationActionReference("DeActivate_POI_Gate_0X", index + 1, orActionList);
							if (index + 1 < Gates.GateCount)
							{
								// Make next segment start gate active
								SetObjectActivationReference("Activate_Hoop_Active_0X", index + 2, orActionList);
								SetPOIactivationActionReference("Activate_POI_Gate_0X", index + 2, orActionList);
								// Show next segment end gate as inactive
								SetObjectActivationReference("Activate_Hoop_Inactive_0X", index + 3, orActionList);
							}
						}
						SetSoundAction("OneShotSound_ThruHoop_0X", 1, orActionList);
						OnEnterActions oea = new(orActionList);
						SimMissionProximityTrigger pt = new()
                        {
							InstanceId = GetGUID(),
							Descr = $"Proximity_Trigger_0{index + 1}",
							Activated = "False",
							Areas = a,
							OnEnterActions = oea
						};
						ptList.Add(pt);
					}
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger = ptList;
		}

		#endregion

		#region Fifth pass object creation/editing

		// Requires 4th pass SetAirportLandingTriggerActivation()
		static private void SetLastEventLandingTrigger()
		{
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
				case nameof(ScenarioTypes.PhotoTour):
				case nameof(ScenarioTypes.SignWriting):
					string search = "Activate_Airport_Landing_Trigger_01";
					int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction.FindIndex(oa => oa.Descr == search);
					ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction[idIndex].InstanceId);
					simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger[^1].OnEnterActions.ObjectReference.Add(or);
					break;
				default:
					break;
			}
		}

		// Requires 4th pass SetProximityTrigger()
		static private void SetProximityTriggerActivationAction()
		{
			List<SimMissionObjectActivationAction> oaaList = [];
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
				case nameof(ScenarioTypes.SignWriting):
					SetProximityTriggerActivations(Gates.GateCount, $"Proximity_Trigger_0X", oaaList, "Activate_Proximity_Trigger_0", "True");
					SetProximityTriggerActivations(Gates.GateCount, $"Proximity_Trigger_0X", oaaList, "Deactivate_Proximity_Trigger_0", "False");
					break;
				case nameof(ScenarioTypes.PhotoTour):
					SetProximityTriggerActivations(PhotoTour.PhotoCount - 2, $"Proximity_Trigger_0X", oaaList, "Activate_Proximity_Trigger_0", "True");
					SetProximityTriggerActivations(PhotoTour.PhotoCount - 2, $"Proximity_Trigger_0X", oaaList, "Deactivate_Proximity_Trigger_0", "False");
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction.AddRange(oaaList);
		}

		#endregion

		#region Sixth pass object creation/editing

		// Requires 5th pass SetProximityTriggerActivationAction()
		static private void SetProximityTriggerOnEnterAction()
		{
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
				case nameof(ScenarioTypes.SignWriting):
					SetProximityTriggerOnEnters(Gates.GateCount);
					break;
				case nameof(ScenarioTypes.PhotoTour):
					SetProximityTriggerOnEnters(PhotoTour.PhotoCount - 2);
					break;
				default:
					break;
			}
		}

		// Requires 4th pass SetProximityTriggerActivationAction()
		static private void SetTimerTriggerFirstEvent()
		{
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
				case nameof(ScenarioTypes.PhotoTour):
				case nameof(ScenarioTypes.SignWriting):
					string search = "Activate_Proximity_Trigger_01";
					int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction.FindIndex(pt => pt.Descr == search);
					ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction[idIndex].InstanceId);
					search = "Timer_Trigger_01";
					idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionTimerTrigger.FindIndex(tt => tt.Descr == search);
					simBaseDocumentXML.WorldBaseFlight.SimMissionTimerTrigger[idIndex].Actions.ObjectReference.Add(or);
					break;
				default:
					break;
			}
		}

		#endregion

		#region Object creation/editing utilities

		static private string GetGUID()
		{
			System.Guid guid = System.Guid.NewGuid();
			string guidUpper = guid.ToString().ToUpper();
			return $"{{{guidUpper}}}";
		}

		static private void SetCelestialCloseWindowActionObjects(List<SimMissionCloseWindowAction> cwaList)
		{
			string search = $"Scaleform_Panel_Window_CelestialSextant";
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow.FindIndex(spw => spw.Descr == search);
			ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow[idIndex].InstanceId);
			SimMissionCloseWindowAction cwa = new()
            {
				Descr = $"Close_Scaleform_Panel_Window_CelestialSextant",
				ObjectReference = or,
				InstanceId = GetGUID()
			};
			cwaList.Add(cwa);
		}

		static private void SetCelestialOpenWindowActionObjects(List<SimMissionOpenWindowAction> owaList)
		{
			string search = $"Scaleform_Panel_Window_CelestialSextant";
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow.FindIndex(spw => spw.Descr == search);
			ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow[idIndex].InstanceId);
			SetWindowSize sws = new("986", "755");
			SimMissionOpenWindowAction owa = new()
            {
				Descr = $"Open_Scaleform_Panel_Window_CelestialSextant",
				SetWindowSize = sws,
				ObjectReference = or,
				InstanceId = GetGUID()
			};
			owaList.Add(owa);
		}

		static private void SetCelestialSextantScaleformPanelWindow(List<SimMissionScaleformPanelWindow> spwList)
		{
			string descr = $"Scaleform_Panel_Window_CelestialSextant";
			string saveLocation = $"{Path.GetDirectoryName(Parameters.SaveLocation)}\\images\\htmlCelestialSextant.html";
			SetCelestialSextantHTML(saveLocation);
			saveLocation = $"{Path.GetDirectoryName(Parameters.SaveLocation)}\\images\\";
			SetCelestialSextantJS(saveLocation);
			saveLocation = $"{Path.GetDirectoryName(Parameters.SaveLocation)}\\images\\styleCelestialSextant.css";
			SetCelestialSextantCSS(saveLocation);
			spwList.Add(new SimMissionScaleformPanelWindow(descr, "False", "True", "images\\htmlCelestialSextant.html", GetGUID(), "window.swf", "False", "True"));
		}

		static private void SetCelestialSextantHTML(string saveLocation)
		{
			string celestialHTML;

			Stream stream = Assembly.Load(Assembly.GetExecutingAssembly().GetName().Name).GetManifestResourceStream($"{Assembly.GetExecutingAssembly().GetName().Name.Replace(" ", "_")}.Resources.HTML.CelestialSextant.html");
			StreamReader reader = new(stream);
			celestialHTML = reader.ReadToEnd();
			string starOptions = "<option>Select Star</option>";
			for (int index = 0; index < CelestialNav.navStarNames.Count; index++)
            {
				starOptions += $"<option>{CelestialNav.navStarNames[index]}</option>";
			}
			celestialHTML = celestialHTML.Replace("starOptionsX", starOptions);
			File.WriteAllText(saveLocation, celestialHTML);
			stream.Dispose();
		}

		static private void SetCelestialSextantJS(string saveLocation)
		{
			string celestialJS;

			Stream stream = Assembly.Load(Assembly.GetExecutingAssembly().GetName().Name).GetManifestResourceStream($"{Assembly.GetExecutingAssembly().GetName().Name.Replace(" ", "_")}.Resources.Javascript.scriptsCelestialSextant.js");
			StreamReader reader = new(stream);
			celestialJS = reader.ReadToEnd();
			string constellation = "";
			string id = "";
			string starNumber = "";
			string starName = "";
			string bayer = "";
			string raH = "";
			string raM = "";
			string raS = "";
			string decD = "";
			string decM = "";
			string decS = "";
			string visMag = "";
			string lines = "";
			Star star;
			for (int index = 0; index < CelestialNav.noStars; index++)
			{
				star = CelestialNav.GetStar(index);
				constellation += $"\"{star.constellation}\"";
				id += $"\"{star.id}\"";
				starNumber += $"\"{star.starNumber}\"";
				starName += $"\"{star.starName}\"";
				bayer += $"\"{star.bayer}\"";
				raH += star.raH.ToString();
				raM += star.raM.ToString();
				raS += star.raS.ToString();
				decD += star.decD.ToString();
				decM += star.decM.ToString();
				decS += star.decS.ToString();
				visMag += star.visMag.ToString();
				if (star.connectedId != "")
                {
					if (lines != "")
                    {
						lines += ", ";
                    }
					lines += $"\"{star.id}\", \"{star.connectedId}\"";
				}
				if (index < CelestialNav.noStars - 1)
				{
					constellation += ",";
					id += ",";
					starNumber += ",";
					starName += ",";
					bayer += ",";
					raH += ",";
					raM += ",";
					raS += ",";
					decD += ",";
					decM += ",";
					decS += ",";
					visMag += ",";
				}
			}
			celestialJS = celestialJS.Replace("constellationX", constellation);
			celestialJS = celestialJS.Replace("idX", id);
			celestialJS = celestialJS.Replace("starNumberX", starNumber);
			celestialJS = celestialJS.Replace("starNameX", starName);
			celestialJS = celestialJS.Replace("bayerX", bayer);
			celestialJS = celestialJS.Replace("raHX", raH);
			celestialJS = celestialJS.Replace("raMX", raM);
			celestialJS = celestialJS.Replace("raSX", raS);
			celestialJS = celestialJS.Replace("decDX", decD);
			celestialJS = celestialJS.Replace("decMX", decM);
			celestialJS = celestialJS.Replace("decSX", decS);
			celestialJS = celestialJS.Replace("visMagX", visMag);
			celestialJS = celestialJS.Replace("linesX", lines);
			celestialJS = celestialJS.Replace("destLatX", Runway.AirportLat.ToString());
			celestialJS = celestialJS.Replace("destLonX", Runway.AirportLon.ToString());
			string ariesGHAd = "";
			string ariesGHAm = "";
			for (int day = 0; day < 3; day++)
            {
				ariesGHAd += "[";
				ariesGHAm += "[";
				for (int hour = 0; hour < 24; hour++)
				{
					ariesGHAd += CelestialNav.ariesGHAd[day, hour];
					ariesGHAm += CelestialNav.ariesGHAm[day, hour];
					if (hour < 23)
					{
						ariesGHAd += ",";
						ariesGHAm += ",";
					}
				}
				ariesGHAd += "]";
				ariesGHAm += "]";
				if (day < 2)
				{
					ariesGHAd += ",";
					ariesGHAm += ",";
				}
			}
			celestialJS = celestialJS.Replace("ariesGHAdX", ariesGHAd);
			celestialJS = celestialJS.Replace("ariesGHAmX", ariesGHAm);
			string starsSHAd = "";
			string starsSHAm = "";
			for (int starIndex = 0; starIndex < CelestialNav.starsSHAd.Length; starIndex++)
            {
				starsSHAd += CelestialNav.starsSHAd[starIndex];
				starsSHAm += CelestialNav.starsSHAm[starIndex];
				if (starIndex < CelestialNav.starsSHAd.Length - 1)
				{
					starsSHAd += ",";
					starsSHAm += ",";
				}
			}
			celestialJS = celestialJS.Replace("starsSHAdX", starsSHAd);
			celestialJS = celestialJS.Replace("starsSHAmX", starsSHAm);
			string starsDECd = "";
			string starsDECm = "";
			for (int starIndex = 0; starIndex < CelestialNav.starsDECd.Length; starIndex++)
			{
				starsDECd += CelestialNav.starsDECd[starIndex];
				starsDECm += CelestialNav.starsDECm[starIndex];
				if (starIndex < CelestialNav.starsDECd.Length - 1)
				{
					starsDECd += ",";
					starsDECm += ",";
				}
			}
			celestialJS = celestialJS.Replace("starsDECdX", starsDECd);
			celestialJS = celestialJS.Replace("starsDECmX", starsDECm);
			string starNameList = "";
			for (int starIndex = 0; starIndex < CelestialNav.navStarNames.Count; starIndex++)
			{
				starNameList += $"\"{CelestialNav.navStarNames[starIndex]}\"";
				if (starIndex < CelestialNav.navStarNames.Count - 1)
				{
					starNameList += ",";
				}
			}
			celestialJS = celestialJS.Replace("starNameListX", starNameList);
			string startDate = $"\"{Parameters.Month}/{Parameters.Day}/{Parameters.Year}\"";
			celestialJS = celestialJS.Replace("startDateX", startDate);
			celestialJS = celestialJS.Replace("northEdgeX", Parameters.CelestialImageNorth.ToString());
			celestialJS = celestialJS.Replace("eastEdgeX", Parameters.CelestialImageEast.ToString());
			celestialJS = celestialJS.Replace("southEdgeX", Parameters.CelestialImageSouth.ToString());
			celestialJS = celestialJS.Replace("westEdgeX", Parameters.CelestialImageWest.ToString());
			File.WriteAllText($"{saveLocation}scriptsCelestialSextant.js", celestialJS);
			stream.Dispose();

			stream = Assembly.Load(Assembly.GetExecutingAssembly().GetName().Name).GetManifestResourceStream($"{Assembly.GetExecutingAssembly().GetName().Name.Replace(" ", "_")}.Resources.Javascript.scriptsCelestialAstroCalcs.js");
			reader = new StreamReader(stream);
			celestialJS = reader.ReadToEnd();
			File.WriteAllText($"{saveLocation}scriptsCelestialAstroCalcs.js", celestialJS);
			stream.Dispose();
		}

		static private void SetCelestialSextantCSS(string saveLocation)
		{
			string signWritingCSS;

			Stream stream = Assembly.Load(Assembly.GetExecutingAssembly().GetName().Name).GetManifestResourceStream($"{Assembly.GetExecutingAssembly().GetName().Name.Replace(" ", "_")}.Resources.CSS.styleCelestialSextant.css");
			StreamReader reader = new(stream);
			signWritingCSS = reader.ReadToEnd();
			File.WriteAllText(saveLocation, signWritingCSS);
			stream.Dispose();
		}

		static private void SetCloseWindowActionReference(string objectName, int index, List<ObjectReference> orList)
		{
			string search = objectName.Replace("X", index.ToString());
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionCloseWindowAction.FindIndex(cwa => cwa.Descr == search);
			ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionCloseWindowAction[idIndex].InstanceId);
			orList.Add(or);
		}

		static private void SetCylinderAreaReference(string objectName, int index, List<ObjectReference> orList)
		{
			string search = objectName.Replace("X", index.ToString());
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionCylinderArea.FindIndex(ca => ca.Descr == search);
			ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionCylinderArea[idIndex].InstanceId);
			orList.Add(or);
		}

		static private void SetDialogReference(string objectName, int index, List<ObjectReference> orList)
		{
			string search = objectName.Replace("X", index.ToString());
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionDialogAction.FindIndex(da => da.Descr == search);
			ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionDialogAction[idIndex].InstanceId);
			orList.Add(or);
		}

		static private void SetGateLibraryObjects(List<SceneryObjectsLibraryObject> loList)
		{
			for (int index = 0; index < Gates.GateCount; index++)
			{
				string orientation = SetOrientation(Gates.GetGate(index));

				// Hoop active objects
				string descr = Constants.genGameHoopNumActiveDesc.Replace("X", (index + 1).ToString());
				string mdlGUID = Constants.genGameHoopNumActiveMDLguid;
				double vOffset = Constants.genGameHoopNumActiveVertOffset;
				string worldPosition = SetWorldPosition(Gates.GetGate(index), vOffset);
				loList.Add(new SceneryObjectsLibraryObject(descr, mdlGUID, worldPosition, orientation, Constants.heightAMSL, "1", GetGUID(), "False"));

				// Hoop inactive objects
				descr = Constants.genGameHoopNumInactiveDesc.Replace("X", (index + 1).ToString());
				mdlGUID = Constants.genGameHoopNumInactiveMDLguid;
				vOffset = Constants.genGameHoopNumInactiveVertOffset;
				worldPosition = SetWorldPosition(Gates.GetGate(index), vOffset);
				string isActivated = "False";
				if (Parameters.SelectedScenario == nameof(ScenarioTypes.Circuit))
                {
					isActivated = "True";
				}
				loList.Add(new SceneryObjectsLibraryObject(descr, mdlGUID, worldPosition, orientation, Constants.heightAMSL, "1", GetGUID(), isActivated));

				// Number objects
				if (Parameters.SelectedScenario == nameof(ScenarioTypes.Circuit))
                {
					descr = Constants.genGameNumBlueDesc.Replace("X", (index + 1).ToString());
					mdlGUID = Constants.genGameNumBlueMDLguid[index];
					vOffset = Constants.genGameNumBlueVertOffset;
					worldPosition = SetWorldPosition(Gates.GetGate(index), vOffset);
					loList.Add(new SceneryObjectsLibraryObject(descr, mdlGUID, worldPosition, orientation, Constants.heightAMSL, "1", GetGUID(), "True"));
                }
			}
		}

		static private void SetGateObjectActivations(string objectName, List<SimMissionObjectActivationAction> oaaList, string descr, string newObjectState)
		{
			for (int index = 0; index < Gates.GateCount; index++)
			{
				string search = objectName.Replace("X", (index + 1).ToString());
				int idIndex = simBaseDocumentXML.WorldBaseFlight.SceneryObjectsLibraryObject.FindIndex(lo => lo.Descr == search);
				List<ObjectReference> orList =
                [
                    new ObjectReference(simBaseDocumentXML.WorldBaseFlight.SceneryObjectsLibraryObject[idIndex].InstanceId)
				];
				SimMissionObjectActivationAction oaa = new()
                {
					InstanceId = GetGUID(),
					Descr = $"{descr}{index + 1}",
					NewObjectState = newObjectState,
					ObjectReferenceList = new ObjectReferenceList(orList)
				};
				oaaList.Add(oaa);
			}
		}

		static private void SetGatePOIactivationActions(List<SimMissionPointOfInterestActivationAction> paaList, string descr, string newObjectState)
        {
			for (int index = 0; index < Gates.GateCount; index++)
			{
				string search = $"POI_Gate_0{index + 1}";
				int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionPointOfInterest.FindIndex(poi => poi.Descr == search);
				List<ObjectReference> orList =
                [
                    new ObjectReference(simBaseDocumentXML.WorldBaseFlight.SimMissionPointOfInterest[idIndex].InstanceId)
				];
				SimMissionPointOfInterestActivationAction paa = new()
                {
					InstanceId = GetGUID(),
					Descr = descr.Replace("X", (index + 1).ToString()),
					NewObjectState = newObjectState,
					ObjectReferenceList = new ObjectReferenceList(orList)
				};
				paaList.Add(paa);
			}
        }

		static private void SetGatePointOfInterestObjects(List<SimMissionPointOfInterest> poiList)
		{
			for (int index = 0; index < Gates.GateCount; index++)
			{
				string search = Constants.genGameHoopNumActiveDesc.Replace("X", (index + 1).ToString());
				int idIndex = simBaseDocumentXML.WorldBaseFlight.SceneryObjectsLibraryObject.FindIndex(lo => lo.Descr == search);
				ObjectReference or = new()
                {
					InstanceId = simBaseDocumentXML.WorldBaseFlight.SceneryObjectsLibraryObject[idIndex].InstanceId
				};
				AttachedWorldObject awo = new()
                {
					ObjectReference = or,
					OffsetXYZ = "0, 80, 0, 0"
				};
				string descr = $"POI_Gate_0{index + 1}";
				string targetName = $"Gate {index + 1}";
				poiList.Add(new SimMissionPointOfInterest(descr, targetName, "False", awo, GetGUID(), "False", index + 1));
            }
		}

		static private void SetGateRectangleAreas(List<SimMissionRectangleArea> raList)
		{
			for (int index = 0; index < Gates.GateCount; index++)
			{
				string descr = $"Area_Hoop_0{index + 1}";
				string orientation = SetOrientation(Gates.GetGate(index));
				double vOffset = Constants.genGameHoopNumActiveVertOffset;
				string worldPosition = SetWorldPosition(Gates.GetGate(index), vOffset);
				AttachedWorldPosition wp = new(worldPosition, Constants.heightAMSL);
				raList.Add(new SimMissionRectangleArea(descr, orientation, "100.0", "25.0", "100.0", wp, GetGUID()));
			}
		}

		static private void SetGoalResolutionReference(string objectName, int index, List<ObjectReference> orList)
		{
			string search = objectName.Replace("X", index.ToString());
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionGoalResolutionAction.FindIndex(gra => gra.Descr == search);
			ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionGoalResolutionAction[idIndex].InstanceId);
			orList.Add(or);
		}

		static private void SetObjectActivationReference(string objectName, int index, List<ObjectReference> orList)
		{
			string search = objectName.Replace("X", index.ToString());
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction.FindIndex(oaa => oaa.Descr == search);
			ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction[idIndex].InstanceId);
			orList.Add(or);
		}

		static private void SetOpenWindowActionReference(string objectName, int index, List<ObjectReference> orList)
		{
			string search = objectName.Replace("X", index.ToString());
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionOpenWindowAction.FindIndex(owa => owa.Descr == search);
			ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionOpenWindowAction[idIndex].InstanceId);
			orList.Add(or);
		}

		static private string SetOrientation(Gate gate)
		{
			return $"{string.Format("{0:0.0}", gate.pitch)},0.0,{string.Format("{0:0.0}", gate.orientation)}";
		}

		static private void SetPhotoTourCloseWindowActionObjects(List<SimMissionCloseWindowAction> cwaList)
		{
			for (int index = 1; index < PhotoTour.PhotoCount; index++)
			{
				string search = $"Scaleform_Panel_Window_Leg_{index}";
				int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow.FindIndex(spw => spw.Descr == search);
				ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow[idIndex].InstanceId);
				SimMissionCloseWindowAction cwa = new()
                {
					Descr = $"Close_Scaleform_Panel_Window_Leg_{index}",
					ObjectReference = or,
					InstanceId = GetGUID()
				};
				cwaList.Add(cwa);
			}
			for (int index = 1; index < PhotoTour.PhotoCount - 1; index++)
			{
				string search = $"Scaleform_Panel_Window_Photo_{index}";
				int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow.FindIndex(spw => spw.Descr == search);
				ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow[idIndex].InstanceId);
				SimMissionCloseWindowAction cwa = new()
                {
					Descr = $"Close_Scaleform_Panel_Window_Photo_{index}",
					ObjectReference = or,
					InstanceId = GetGUID()
				};
				cwaList.Add(cwa);
			}
		}

		static private void SetPhotoTourCylinderAreas(List<SimMissionCylinderArea> caList)
		{
			for (int index = 1; index < PhotoTour.PhotoCount - 1; index++)
			{
				string descr = $"Area_Cylinder_{index}";
				string orientation = "0.0,0.0,0.0";
				string radius = Parameters.HotspotRadius.ToString(); // metres
				string height = "18520.0"; // metres (10nm)
				string drawStyle = "None";
				PhotoLegParams photoLegParams = PhotoTour.GetPhotoLeg(index);
				string worldPosition = $"{ScenarioFXML.FormatCoordXML(photoLegParams.latitude, "N", "S", true)},{ScenarioFXML.FormatCoordXML(photoLegParams.longitude, "E", "W", true)},+0.0";
				AttachedWorldPosition wp = new(worldPosition, "True");
				caList.Add(new SimMissionCylinderArea(descr, orientation, radius, height, drawStyle, wp, GetGUID()));
			}
		}

		static private void SetPhotoTourLegRouteHTML(string saveLocation, int photoIndex)
		{
			string legRouteHTML;

			Stream stream = Assembly.Load(Assembly.GetExecutingAssembly().GetName().Name).GetManifestResourceStream($"{Assembly.GetExecutingAssembly().GetName().Name.Replace(" ", "_")}.Resources.HTML.PhotoTour_LegRoute.html");
			StreamReader reader = new(stream);
			legRouteHTML = reader.ReadToEnd();
			legRouteHTML = legRouteHTML.Replace("scriptsMovingMap_X.js", $"scriptsMovingMap_{photoIndex}.js");
			legRouteHTML = legRouteHTML.Replace("LegRoute_X_1_zoom1", $"LegRoute_{photoIndex}_1_zoom1");
			legRouteHTML = legRouteHTML.Replace("LegRoute_X_2_zoom1", $"LegRoute_{photoIndex}_2_zoom1");
			legRouteHTML = legRouteHTML.Replace("LegRoute_X_3_zoom1", $"LegRoute_{photoIndex}_3_zoom1");
			legRouteHTML = legRouteHTML.Replace("LegRoute_X_1_zoom2", $"LegRoute_{photoIndex}_1_zoom2");
			legRouteHTML = legRouteHTML.Replace("LegRoute_X_2_zoom2", $"LegRoute_{photoIndex}_2_zoom2");
			legRouteHTML = legRouteHTML.Replace("LegRoute_X_3_zoom2", $"LegRoute_{photoIndex}_3_zoom2");
			legRouteHTML = legRouteHTML.Replace("LegRoute_X_1_zoom4", $"LegRoute_{photoIndex}_1_zoom4");
			legRouteHTML = legRouteHTML.Replace("LegRoute_X_2_zoom4", $"LegRoute_{photoIndex}_2_zoom4");
			legRouteHTML = legRouteHTML.Replace("LegRoute_X_3_zoom4", $"LegRoute_{photoIndex}_3_zoom4");
			File.WriteAllText(saveLocation, legRouteHTML);
			stream.Dispose();
		}

		static private void SetPhotoTourLegRouteJS(string saveLocation, int photoIndex)
		{
			string legRouteJS;

			Stream stream = Assembly.Load(Assembly.GetExecutingAssembly().GetName().Name).GetManifestResourceStream($"{Assembly.GetExecutingAssembly().GetName().Name.Replace(" ", "_")}.Resources.Javascript.scriptsMovingMap.js");
			StreamReader reader = new(stream);
			legRouteJS = reader.ReadToEnd();
			PhotoLegParams photoLeg = PhotoTour.GetPhotoLeg(photoIndex - 1);
			legRouteJS = legRouteJS.Replace("mapNorthX", photoLeg.northEdge.ToString());
			legRouteJS = legRouteJS.Replace("mapEastX", photoLeg.eastEdge.ToString());
			legRouteJS = legRouteJS.Replace("mapSouthX", photoLeg.southEdge.ToString());
			legRouteJS = legRouteJS.Replace("mapWestX", photoLeg.westEdge.ToString());
			legRouteJS = legRouteJS.Replace("mapWestX", photoLeg.westEdge.ToString());
			legRouteJS = legRouteJS.Replace("mapWidthX", Parameters.PhotoLegWindowSize.ToString());
			legRouteJS = legRouteJS.Replace("mapHeightX", Parameters.PhotoLegWindowSize.ToString());
			File.WriteAllText(saveLocation, legRouteJS);
			stream.Dispose();
		}

		static private void SetPhotoTourLegRouteCSS(string saveLocation)
		{
			string legRouteCSS;

			Stream stream = Assembly.Load(Assembly.GetExecutingAssembly().GetName().Name).GetManifestResourceStream($"{Assembly.GetExecutingAssembly().GetName().Name.Replace(" ", "_")}.Resources.CSS.styleMovingMap.css");
			StreamReader reader = new(stream);
			legRouteCSS = reader.ReadToEnd();
			legRouteCSS = legRouteCSS.Replace("mapWidthX", Parameters.PhotoLegWindowSize.ToString());
			legRouteCSS = legRouteCSS.Replace("mapHeightX", Parameters.PhotoLegWindowSize.ToString());
			File.WriteAllText(saveLocation, legRouteCSS);
			stream.Dispose();
		}

		static private void SetPhotoTourOpenWindowActionObjects(List<SimMissionOpenWindowAction> owaList)
		{
			for (int index = 1; index < PhotoTour.PhotoCount; index++)
			{
				string search = $"Scaleform_Panel_Window_Leg_{index}";
				int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow.FindIndex(spw => spw.Descr == search);
				ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow[idIndex].InstanceId);
				SetWindowSize sws = new((Parameters.PhotoLegWindowSize + 15).ToString(), (Parameters.PhotoLegWindowSize + 65).ToString());
				SimMissionOpenWindowAction owa = new()
                {
					Descr = $"Open_Scaleform_Panel_Window_Leg_{index}",
					SetWindowSize = sws,
					ObjectReference = or,
					InstanceId = GetGUID()
				};
				owaList.Add(owa);
			}
			for (int index = 1; index < PhotoTour.PhotoCount - 1; index++)
			{
				string search = $"Scaleform_Panel_Window_Photo_{index}";
				int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow.FindIndex(spw => spw.Descr == search);
				ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow[idIndex].InstanceId);
				string bitmapFilename = $"{Path.GetDirectoryName(Parameters.SaveLocation)}\\images\\photo_X.jpg".Replace("X", index.ToString());
				Bitmap drawing = new(bitmapFilename);
				SetWindowSize sws = new((drawing.Width).ToString(), (drawing.Height).ToString());
				SimMissionOpenWindowAction owa = new()
                {
					Descr = $"Open_Scaleform_Panel_Window_Photo_{index}",
					SetWindowSize = sws,
					ObjectReference = or,
					InstanceId = GetGUID()
				};
				owaList.Add(owa);
			}
		}

		static private void SetPhotoTourScaleformPanelWindow(List<SimMissionScaleformPanelWindow> spwList)
		{
			string saveLocation;
			for (int index = 1; index < PhotoTour.PhotoCount; index++)
			{
				string descr = $"Scaleform_Panel_Window_Leg_{index}";
				saveLocation = $"{Path.GetDirectoryName(Parameters.SaveLocation)}\\images\\LegRoute_X.html".Replace("X", index.ToString());
				SetPhotoTourLegRouteHTML(saveLocation, index);
				saveLocation = $"{Path.GetDirectoryName(Parameters.SaveLocation)}\\images\\scriptsMovingMap_X.js".Replace("X", index.ToString());
				SetPhotoTourLegRouteJS(saveLocation, index);
				spwList.Add(new SimMissionScaleformPanelWindow(descr, "False", "True", "images\\LegRoute_X.html".Replace("X", index.ToString()), GetGUID(), "window.swf", "False", "False"));
			}
			saveLocation = $"{Path.GetDirectoryName(Parameters.SaveLocation)}\\images\\styleMovingMap.css";
			SetPhotoTourLegRouteCSS(saveLocation);
			for (int index = 1; index < PhotoTour.PhotoCount - 1; index++)
			{
				string descr = $"Scaleform_Panel_Window_Photo_{index}";
				string html = "<!DOCTYPE HTML>\n<html>\t<img src=\"photo_X.jpg\">\n</html>".Replace("X", index.ToString());
				File.WriteAllText($"{Path.GetDirectoryName(Parameters.SaveLocation)}\\images\\photo_X.html".Replace("X", index.ToString()), html);
				spwList.Add(new SimMissionScaleformPanelWindow(descr, "False", "True", "images\\photo_X.html".Replace("X", index.ToString()), GetGUID(), "window.swf", "False", "False"));
			}
		}

		static private void SetPOIactivationActionReference(string objectName, int index, List<ObjectReference> orList)
		{
			string search = objectName.Replace("X", index.ToString());
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionPointOfInterestActivationAction.FindIndex(paa => paa.Descr == search);
			ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionPointOfInterestActivationAction[idIndex].InstanceId);
			orList.Add(or);
		}

		static private void SetProximityTriggerActivations(int indexCount, string objectName, List<SimMissionObjectActivationAction> oaaList, string descr, string newObjectState)
		{
			for (int index = 1; index <= indexCount; index++)
			{
				string search = objectName.Replace("X", index.ToString());
				int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger.FindIndex(pt => pt.Descr == search);
				ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger[idIndex].InstanceId);
				List<ObjectReference> orList =
                [
                    or
				];
				ObjectReferenceList orl = new(orList);
                SimMissionObjectActivationAction oaa = new()
                {
                    InstanceId = GetGUID(),
                    Descr = $"{descr}{index}",
                    NewObjectState = newObjectState,
                    ObjectReferenceList = orl
                };
                oaaList.Add(oaa);
			}
		}

		static private void SetProximityTriggerOnEnters(int indexCount)
		{
			for (int index = 1; index <= indexCount; index++)
			{
				List<ObjectReference> orActionList = [];
				SetObjectActivationReference("Deactivate_Proximity_Trigger_0X", index, orActionList);
				if (index < indexCount)
				{
					SetObjectActivationReference("Activate_Proximity_Trigger_0X", index + 1, orActionList);
				}
				string search = $"Proximity_Trigger_0X".Replace("X", (index).ToString());
				int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger.FindIndex(pt => pt.Descr == search);
				simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger[idIndex].OnEnterActions.ObjectReference.Add(orActionList[0]);
				if (index < indexCount)
				{
					simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger[idIndex].OnEnterActions.ObjectReference.Add(orActionList[1]);
				}
			}
		}

		static private void SetRectangleAreaReference(string objectName, int index, List<ObjectReference> orList)
		{
			string search = objectName.Replace("X", index.ToString());
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionRectangleArea.FindIndex(ra => ra.Descr == search);
			ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionRectangleArea[idIndex].InstanceId);
			orList.Add(or);
		}

		static private void SetScriptActionReference(string objectName, List<ObjectReference> orList)
		{
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionScriptAction.FindIndex(sa => sa.Descr == objectName);
			ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionScriptAction[idIndex].InstanceId);
			orList.Add(or);
		}

		static private void SetSignWritingCloseWindowActionObjects(List<SimMissionCloseWindowAction> cwaList)
		{
			string search = $"Scaleform_Panel_Window_SignWriting";
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow.FindIndex(spw => spw.Descr == search);
			ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow[idIndex].InstanceId);
			SimMissionCloseWindowAction cwa = new()
            {
				Descr = $"Close_Scaleform_Panel_Window_SignWriting",
				ObjectReference = or,
				InstanceId = GetGUID()
			};
			cwaList.Add(cwa);
		}

		static private void SetSignWritingHTML(string saveLocation)
		{
			string signWritingHTML;
			double canvasWidth;
			double canvasHeight;

			Stream stream = Assembly.Load(Assembly.GetExecutingAssembly().GetName().Name).GetManifestResourceStream($"{Assembly.GetExecutingAssembly().GetName().Name.Replace(" ", "_")}.Resources.HTML.SignWriting.html");
			StreamReader reader = new(stream);
			signWritingHTML = reader.ReadToEnd();

			// Cell is a square where each side has length of two segments, a letter is four cells high and two cells wide
			// Gates.cellPixels is from middle pixel in segment outside edge to middle pixel in opposite segment outside edge inclusive
			// Between letters is a gap of one cell width
			// Canvas width is the cells plus cell gaps between letters plus the outside half of segment line at each end plus padding (20 * 2)
			canvasWidth = Gates.cellPixels * 3 * Parameters.Message.Length + 1 + Gates.cellCapExtraPixels * 2 - Gates.cellPixels + 40;
			signWritingHTML = signWritingHTML.Replace("canvasWidthX", canvasWidth.ToString());
			canvasHeight = Gates.cellPixels * 4 + 1 + Gates.cellCapExtraPixels * 2 + 40;
			signWritingHTML = signWritingHTML.Replace("canvasHeightX", canvasHeight.ToString());
			signWritingHTML = signWritingHTML.Replace("mapNorthX", (Runway.AirportLat + Parameters.SegmentLengthDeg * 4).ToString());
			signWritingHTML = signWritingHTML.Replace("mapEastX", (Runway.AirportLon + Parameters.SegmentLengthDeg * (3 * Parameters.Message.Length - 1)).ToString());
			signWritingHTML = signWritingHTML.Replace("mapSouthX", Runway.AirportLat.ToString());
			signWritingHTML = signWritingHTML.Replace("mapWestX", Runway.AirportLon.ToString());
			signWritingHTML = signWritingHTML.Replace("messageLengthX", Parameters.Message.Length.ToString());
			signWritingHTML = signWritingHTML.Replace("magVarX", Runway.MagVar.ToString());
			string topPixels = "0,";
			string leftPixels = "0,";
			string bearings = "0,";
			Gate gate;
			for (int index = 0; index < Gates.GateCount; index++)
            {
				gate = Gates.GetGate(index);
				topPixels += gate.topPixels.ToString();
				leftPixels += gate.leftPixels.ToString();
				bearings += gate.orientation.ToString();
				if (index < Gates.GateCount - 1)
				{
					topPixels += ",";
					leftPixels += ",";
					bearings += ",";
				}
			}
			signWritingHTML = signWritingHTML.Replace("gateTopPixelsX", topPixels);
			signWritingHTML = signWritingHTML.Replace("gateLeftPixelsX", leftPixels);
			signWritingHTML = signWritingHTML.Replace("gateBearingsX", bearings);
			File.WriteAllText(saveLocation, signWritingHTML);
			stream.Dispose();
		}

		static private void SetSignWritingJS(string saveLocation)
		{
			string signWritingJS;

			Stream stream = Assembly.Load(Assembly.GetExecutingAssembly().GetName().Name).GetManifestResourceStream($"{Assembly.GetExecutingAssembly().GetName().Name.Replace(" ", "_")}.Resources.Javascript.scriptsSignWriting.js");
			StreamReader reader = new(stream);
			signWritingJS = reader.ReadToEnd();
			File.WriteAllText(saveLocation, signWritingJS);
			stream.Dispose();
		}

		static private void SetSignWritingCSS(string saveLocation)
		{
			string signWritingCSS;

			Stream stream = Assembly.Load(Assembly.GetExecutingAssembly().GetName().Name).GetManifestResourceStream($"{Assembly.GetExecutingAssembly().GetName().Name.Replace(" ", "_")}.Resources.CSS.styleSignWriting.css");
			StreamReader reader = new(stream);
			signWritingCSS = reader.ReadToEnd();
			File.WriteAllText(saveLocation, signWritingCSS);
			stream.Dispose();
		}
		
		static private void SetSignWritingOpenWindowActionObjects(List<SimMissionOpenWindowAction> owaList)
		{
			string search = $"Scaleform_Panel_Window_SignWriting";
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow.FindIndex(spw => spw.Descr == search);
			ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow[idIndex].InstanceId);
			double windowWidth = Gates.cellPixels * (3 * Parameters.Message.Length - 1) + 1 + Gates.cellCapExtraPixels * 2 + 40 + 55;
			if (windowWidth > Parameters.MessageWindowWidth)
				windowWidth = Parameters.MessageWindowWidth;
			double windowHeight = Gates.cellPixels * 4 + 1 + Gates.cellCapExtraPixels * 2 + 40 + 60;
			SetWindowSize sws = new(windowWidth.ToString(), windowHeight.ToString());
			SimMissionOpenWindowAction owa = new()
            {
				Descr = $"Open_Scaleform_Panel_Window_SignWriting",
				SetWindowSize = sws,
				ObjectReference = or,
				InstanceId = GetGUID()
			};
			owaList.Add(owa);
		}

		static private void SetSignWritingScaleformPanelWindow(List<SimMissionScaleformPanelWindow> spwList)
		{
			string descr = $"Scaleform_Panel_Window_SignWriting";
			string saveLocation = $"{Path.GetDirectoryName(Parameters.SaveLocation)}\\images\\htmlSignWriting.html";
			SetSignWritingHTML(saveLocation);
			saveLocation = $"{Path.GetDirectoryName(Parameters.SaveLocation)}\\images\\scriptsSignWriting.js";
			SetSignWritingJS(saveLocation);
			saveLocation = $"{Path.GetDirectoryName(Parameters.SaveLocation)}\\images\\styleSignWriting.css";
			SetSignWritingCSS(saveLocation);
			spwList.Add(new SimMissionScaleformPanelWindow(descr, "False", "True", "images\\htmlSignWriting.html", GetGUID(), "window.swf", "False", "False"));
		}

		static private void SetSignWritingScenarioVariables(List<SimMissionScenarioVariable> svList)
		{
			svList.Add(new SimMissionScenarioVariable(null, GetGUID(), "", "Smoke on/off variable", "smokeOn", "0"));
			svList.Add(new SimMissionScenarioVariable(null, GetGUID(), "", "Current gate number variable", "currentGateNo", "0"));
		}
		
		static private void SetSignWritingScriptActions(List<SimMissionScriptAction> saList)
		{
			saList.Add(new SimMissionScriptAction("Smoke on/off script", "!lua local var smokeOn = varget(\"S:smokeOn\", \"NUMBER\") if smokeOn == 1 then varset(\"S:smokeOn\", \"NUMBER\", 0) else varset(\"S:smokeOn\", \"NUMBER\", 1) end", GetGUID(), ""));
			saList.Add(new SimMissionScriptAction("Increment gate number script", "!lua local var currentGateNo = varget(\"S:currentGateNo\", \"NUMBER\") currentGateNo = currentGateNo + 1 varset(\"S:currentGateNo\", \"NUMBER\", currentGateNo)", GetGUID(), ""));
		}

		static private void SetSoundAction(string objectName, int index, List<ObjectReference> orList)
		{
			string search = objectName.Replace("X", index.ToString());
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionOneShotSoundAction.FindIndex(sa => sa.Descr == search);
			ObjectReference or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionOneShotSoundAction[idIndex].InstanceId);
			orList.Add(or);
		}

		static private string SetWorldPosition(Gate gate, double vertOffset)
		{
			return $"{ScenarioFXML.FormatCoordXML(gate.lat, "N", "S", false)},{ScenarioFXML.FormatCoordXML(gate.lon, "E", "W", false)},+{gate.amsl + vertOffset}";
		}

		#endregion

		static private void WriteXML()
			{
				XmlSerializer xmlSerializer = new(simBaseDocumentXML.GetType());

				using StreamWriter writer = new(Parameters.SaveLocation.Replace("fxml", "xml"));
				xmlSerializer.Serialize(writer, simBaseDocumentXML);
			}
	}

	#region Simbase.Document class definitions

	[XmlRoot(ElementName = "Actions")]
	public class Actions
	{
		public Actions(List<ObjectReference> v1)
		{
			ObjectReference = v1;
		}

		public Actions()
		{
		}

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "And")]
	public class And
	{

		[XmlElement(ElementName = "GreaterOrEqual")]
		public GreaterOrEqual GreaterOrEqual { get; set; }

		[XmlElement(ElementName = "GreaterThan")]
		public GreaterThan GreaterThan { get; set; }
	}

	[XmlRoot(ElementName = "Areas")]
	public class Areas
	{
		public Areas(List<ObjectReference> v1)
		{
			ObjectReference = v1;
		}

		public Areas()
		{
		}

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "AttachedWorldObject")]
	public class AttachedWorldObject
	{

		[XmlElement(ElementName = "ObjectReference")]
		public ObjectReference ObjectReference { get; set; }

		[XmlElement(ElementName = "OffsetXYZ")]
		public string OffsetXYZ { get; set; }
	}

	[XmlRoot(ElementName = "AttachedWorldPosition")]
	public class AttachedWorldPosition
	{
		public AttachedWorldPosition(string v1, string v2)
		{
			WorldPosition = v1;
			AltitudeIsAGL = v2;
		}
		public AttachedWorldPosition()
		{
		}

		[XmlElement(ElementName = "WorldPosition")]
		public string WorldPosition { get; set; }

		[XmlElement(ElementName = "AltitudeIsAGL")]
		public string AltitudeIsAGL { get; set; }
	}

	[XmlRoot(ElementName = "Condition")]
	public class Condition
	{

		[XmlElement(ElementName = "And")]
		public And And { get; set; }
	}

	[XmlRoot(ElementName = "Constant")]
	public class Constant
	{

		[XmlElement(ElementName = "Double")]
		public double Double { get; set; }
	}

	[XmlRoot(ElementName = "Goals")]
	public class Goals
	{
		public Goals(List<ObjectReference> v1)
		{
			ObjectReference = v1;
		}
		public Goals()
		{
		}

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "GreaterOrEqual")]
	public class GreaterOrEqual
	{

		[XmlElement(ElementName = "LHS")]
		public LHS LHS { get; set; }

		[XmlElement(ElementName = "RHS")]
		public RHS RHS { get; set; }
	}

	[XmlRoot(ElementName = "GreaterThan")]
	public class GreaterThan
	{

		[XmlElement(ElementName = "LHS")]
		public LHS LHS { get; set; }

		[XmlElement(ElementName = "RHS")]
		public RHS RHS { get; set; }
	}

	[XmlRoot(ElementName = "GroundVehicleAI")]
	public class GroundVehicleAI
	{

		[XmlElement(ElementName = "GroundCruiseSpeed")]
		public double GroundCruiseSpeed { get; set; }

		[XmlElement(ElementName = "GroundTurnSpeed")]
		public double GroundTurnSpeed { get; set; }

		[XmlElement(ElementName = "GroundTurnTime")]
		public double GroundTurnTime { get; set; }

		[XmlElement(ElementName = "YieldToUser")]
		public string YieldToUser { get; set; }

		[XmlElement(ElementName = "WaypointListReference")]
		public string WaypointListReference { get; set; }

		[XmlElement(ElementName = "Unit_Mode")]
		public string UnitMode { get; set; }
	}

	[XmlRoot(ElementName = "LHS")]
	public class LHS
	{

		[XmlElement(ElementName = "Property")]
		public PropertyXML PropertyXML { get; set; }
	}

	[XmlRoot(ElementName = "ObjectReference")]
	public class ObjectReference
	{
		public ObjectReference(string v1)
		{
			InstanceId = v1;
		}

		public ObjectReference()
		{
		}

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "ObjectReferenceList")]
	public class ObjectReferenceList
	{
		public ObjectReferenceList(List<ObjectReference> v1)
		{
			ObjectReference = v1;
		}

		public ObjectReferenceList()
		{
		}

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "OnEnterActions")]
	public class OnEnterActions
	{
		public OnEnterActions(List<ObjectReference> v1)
		{
			ObjectReference = v1;
		}

		public OnEnterActions()
		{
		}

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "OnExitActions")]
	public class OnExitActions
	{

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "Property")]
	public class PropertyXML
	{

		[XmlElement(ElementName = "Name")]
		public string Name { get; set; }

		[XmlElement(ElementName = "Units")]
		public string Units { get; set; }

		[XmlElement(ElementName = "ObjectReference")]
		public ObjectReference ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "RHS")]
	public class RHS
	{

		[XmlElement(ElementName = "Constant")]
		public Constant Constant { get; set; }
	}

	[XmlRoot(ElementName = "SetWindowSize")]
	public class SetWindowSize
	{
		public SetWindowSize(string v1, string v2)
		{
			WindowWidth = v1;
			WindowHeight = v2;
		}
		public SetWindowSize()
		{
		}

		[XmlElement(ElementName = "WindowWidth")]
		public string WindowWidth { get; set; }

		[XmlElement(ElementName = "WindowHeight")]
		public string WindowHeight { get; set; }
	}

	[XmlRoot(ElementName = "Waypoint")]
	public class Waypoint
	{

		[XmlElement(ElementName = "AltitudeIsAGL")]
		public string AltitudeIsAGL { get; set; }

		[XmlElement(ElementName = "WorldPosition")]
		public string WorldPosition { get; set; }

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "WaypointID")]
		public int WaypointID { get; set; }

		[XmlElement(ElementName = "Orientation")]
		public string Orientation { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "SpeedKnots")]
		public double SpeedKnots { get; set; }
	}

	[XmlRoot(ElementName = "SceneryObjects.LibraryObject")]
	public class SceneryObjectsLibraryObject
	{
		public SceneryObjectsLibraryObject(string v1, string v2, string v3, string v4, string v5, string v6, string v7, string v8)
		{
			Descr = v1;
			MDLGuid = v2;
			WorldPosition = v3;
			Orientation = v4;
			AltitudeIsAGL = v5;
			Scale = v6;
			InstanceId = v7;
			Activated = v8;
		}

		public SceneryObjectsLibraryObject()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "MDLGuid")]
		public string MDLGuid { get; set; }

		[XmlElement(ElementName = "WorldPosition")]
		public string WorldPosition { get; set; }

		[XmlElement(ElementName = "Orientation")]
		public string Orientation { get; set; }

		[XmlElement(ElementName = "AltitudeIsAGL")]
		public string AltitudeIsAGL { get; set; }

		[XmlElement(ElementName = "Scale")]
		public string Scale { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }
	}

	[XmlRoot(ElementName = "SimBase.Document")]
	public class SimBaseDocumentXML
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Title")]
		public string Title { get; set; }

		[XmlElement(ElementName = "WorldBase.Flight")]
		public WorldBaseFlight WorldBaseFlight { get; set; }

		[XmlElement(ElementName = "MissionBuilder.MissionBuilder")]
		public object MissionBuilderMissionBuilder { get; set; }

		[XmlElement(ElementName = "WorldBase.AreasOfInterest")]
		public object WorldBaseAreasOfInterest { get; set; }

		[XmlElement(ElementName = "WorldBase.Waypoints")]
		public WorldBaseWaypoints WorldBaseWaypoints { get; set; }

		[XmlAttribute(AttributeName = "Type")]
		public string Type { get; set; }

		[XmlAttribute(AttributeName = "version")]
		public double Version { get; set; }
	}

	[XmlRoot(ElementName = "SimContain.Container")]
	public class SimContainContainer
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "WorldPosition")]
		public string WorldPosition { get; set; }

		[XmlElement(ElementName = "Orientation")]
		public string Orientation { get; set; }

		[XmlElement(ElementName = "ContainerTitle")]
		public string ContainerTitle { get; set; }

		[XmlElement(ElementName = "ContainerID")]
		public int ContainerID { get; set; }

		[XmlElement(ElementName = "IdentificationNumber")]
		public int IdentificationNumber { get; set; }

		[XmlElement(ElementName = "IsOnGround")]
		public string IsOnGround { get; set; }

		[XmlElement(ElementName = "AIType")]
		public string AIType { get; set; }

		[XmlElement(ElementName = "GroundVehicleAI")]
		public GroundVehicleAI GroundVehicleAI { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimContain.WaypointList")]
	public class SimContainWaypointList
	{

		[XmlElement(ElementName = "WrapWaypoints")]
		public string WrapWaypoints { get; set; }

		[XmlElement(ElementName = "CurrentWaypoint")]
		public int CurrentWaypoint { get; set; }

		[XmlElement(ElementName = "BackupToFirst")]
		public string BackupToFirst { get; set; }

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Waypoint")]
		public List<Waypoint> Waypoint { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.AirportLandingTrigger")]
	public class SimMissionAirportLandingTrigger
	{
		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "LandingType")]
		public string LandingType { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlElement(ElementName = "Actions")]
		public Actions Actions { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "AirportIdent")]
		public string AirportIdent { get; set; }

		[XmlElement(ElementName = "RunwayFilter")]
		public RunwayFilter RunwayFilter { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.AreaLandingTrigger")]
	public class SimMissionAreaLandingTrigger
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "LandingType")]
		public string LandingType { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlElement(ElementName = "Actions")]
		public Actions Actions { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "Areas")]
		public Areas Areas { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.CloseWindowAction")]
	public class SimMissionCloseWindowAction
	{
		public SimMissionCloseWindowAction(string v1, ObjectReference v2, string v3)
		{
			Descr = v1;
			ObjectReference = v2;
			InstanceId = v3;
		}

		public SimMissionCloseWindowAction()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "ObjectReference")]
		public ObjectReference ObjectReference { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.CylinderArea")]
	public class SimMissionCylinderArea
	{
		public SimMissionCylinderArea(string v1, string v2, string v3, string v4, string v5, AttachedWorldPosition v6, string v7)
		{
			Descr = v1;
			Orientation = v2;
			AreaRadius = v3;
			Height = v4;
			DrawStyle = v5;
			AttachedWorldPosition = v6;
			InstanceId = v7;
		}

		public SimMissionCylinderArea()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Orientation")]
		public string Orientation { get; set; }

		[XmlElement(ElementName = "AreaRadius")]
		public string AreaRadius { get; set; }

		[XmlElement(ElementName = "Height")]
		public string Height { get; set; }

		[XmlElement(ElementName = "DrawStyle")]
		public string DrawStyle { get; set; }

		[XmlElement(ElementName = "AttachedWorldPosition")]
		public AttachedWorldPosition AttachedWorldPosition { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.DialogAction")]
	public class SimMissionDialogAction
	{
		public SimMissionDialogAction(string v1, string v2, string v3, string v4, string v5)
		{
			Descr = v1;
			Text = v2;
			DelaySeconds = v3;
			SoundType = v4;
			InstanceId = v5;
		}
		public SimMissionDialogAction()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Text")]
		public string Text { get; set; }

		[XmlElement(ElementName = "DelaySeconds")]
		public string DelaySeconds { get; set; }

		[XmlElement(ElementName = "SoundType")]
		public string SoundType { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.Goal")]
	public class SimMissionGoal
	{
		public SimMissionGoal(string v1, string v2, string v3)
		{
			Descr = v1;
			Text = v2;
			InstanceId = v3;
		}

		public SimMissionGoal()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Text")]
		public string Text { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.GoalResolutionAction")]
	public class SimMissionGoalResolutionAction
	{

		[XmlElement(ElementName = "GoalResolution")]
		public string GoalResolution { get; set; }

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Goals")]
		public Goals Goals { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.ObjectActivationAction")]
	public class SimMissionObjectActivationAction
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "ObjectReferenceList")]
		public ObjectReferenceList ObjectReferenceList { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "NewObjectState")]
		public string NewObjectState { get; set; }

	}

	[XmlRoot(ElementName = "SimMission.OneShotSoundAction")]
	public class SimMissionOneShotSoundAction
	{
        public SimMissionOneShotSoundAction(string v1, string v2, string v3)
        {
			Descr = v1;
			SoundFileName = v2;
			InstanceId = v3;
		}
		public SimMissionOneShotSoundAction()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "SoundFileName")]
		public string SoundFileName { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.OpenWindowAction")]
	public class SimMissionOpenWindowAction
	{
		public SimMissionOpenWindowAction(string v1, SetWindowSize v2, ObjectReference v3, string v4)
		{
			Descr = v1;
			SetWindowSize = v2;
			ObjectReference = v3;
			InstanceId = v4;
		}

		public SimMissionOpenWindowAction()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "SetWindowSize")]
		public SetWindowSize SetWindowSize { get; set; }

		[XmlElement(ElementName = "ObjectReference")]
		public ObjectReference ObjectReference { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.PointOfInterestActivationAction")]
	public class SimMissionPointOfInterestActivationAction
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "ObjectReferenceList")]
		public ObjectReferenceList ObjectReferenceList { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "NewObjectState")]
		public string NewObjectState { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.RectangleArea")]
	public class SimMissionRectangleArea
	{
		public SimMissionRectangleArea(string v1, string v2, string v3, string v4, string v5, AttachedWorldPosition v6, string v7)
		{
			Descr = v1;
			Orientation = v2;
			Length = v3;
			Width = v4;
			Height = v5;
			AttachedWorldPosition = v6;
			InstanceId = v7;
		}

		public SimMissionRectangleArea()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Orientation")]
		public string Orientation { get; set; }

		[XmlElement(ElementName = "Length")]
		public string Length { get; set; }

		[XmlElement(ElementName = "Width")]
		public string Width { get; set; }

		[XmlElement(ElementName = "Height")]
		public string Height { get; set; }

		[XmlElement(ElementName = "AttachedWorldPosition")]
		public AttachedWorldPosition AttachedWorldPosition { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "AttachedWorldObject")]
		public AttachedWorldObject AttachedWorldObject { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.RunwayFilter")]
	public class RunwayFilter
	{
		public RunwayFilter(string v1, string v2, string v3)
		{
			Descr = v1;
			RunwayNumber = v2;
			RunwayDesignator = v3;
		}

		public RunwayFilter()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "RunwayNumber")]
		public string RunwayNumber { get; set; }

		[XmlElement(ElementName = "RunwayDesignator")]
		public string RunwayDesignator { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.ScaleformPanelWindow")]
	public class SimMissionScaleformPanelWindow
	{
		public SimMissionScaleformPanelWindow(string v1, string v2, string v3, string v4, string v5, string v6, string v7, string v8)
		{
			Descr = v1;
			Locked = v2;
			HasMouseInteractivity = v3;
			FlashFileName = v4;
			InstanceId = v5;
			UIPanelFileName = v6;
			Docked = v7;
			HasKeyboardInteractivity = v8;
		}

		public SimMissionScaleformPanelWindow()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Locked")]
		public string Locked { get; set; }

		[XmlElement(ElementName = "HasMouseInteractivity")]
		public string HasMouseInteractivity { get; set; }

		[XmlElement(ElementName = "FlashFileName")]
		public string FlashFileName { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "UIPanelFileName")]
		public string UIPanelFileName { get; set; }

		[XmlElement(ElementName = "Docked")]
		public string Docked { get; set; }

		[XmlElement(ElementName = "HasKeyboardInteractivity")]
		public string HasKeyboardInteractivity { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.PointOfInterest")]
	public class SimMissionPointOfInterest
	{
		public SimMissionPointOfInterest(string v1, string v2, string v3, AttachedWorldObject v4, string v5, string v6, int v7)
		{
			Descr = v1;
			TargetName = v2;
			CurrentSelection = v3;
			AttachedWorldObject = v4;
			InstanceId = v5;
			Activated = v6;
			CycleOrder = v7;
		}

		public SimMissionPointOfInterest()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "TargetName")]
		public string TargetName { get; set; }

		[XmlElement(ElementName = "CurrentSelection")]
		public string CurrentSelection { get; set; }

		[XmlElement(ElementName = "AttachedWorldObject")]
		public AttachedWorldObject AttachedWorldObject { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlElement(ElementName = "CycleOrder")]
		public int CycleOrder { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.PropertyTrigger")]
	public class SimMissionPropertyTrigger
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlElement(ElementName = "Actions")]
		public Actions Actions { get; set; }

		[XmlElement(ElementName = "Condition")]
		public Condition Condition { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.ProximityTrigger")]
	public class SimMissionProximityTrigger
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Areas")]
		public Areas Areas { get; set; }

		[XmlElement(ElementName = "OnEnterActions")]
		public OnEnterActions OnEnterActions { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlElement(ElementName = "OnExitActions")]
		public OnExitActions OnExitActions { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.RealismOverrides")]
	public class SimMissionRealismOverrides
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "UserTips")]
		public string UserTips { get; set; }

		[XmlElement(ElementName = "CrashBehavior")]
		public string CrashBehavior { get; set; }

		[XmlElement(ElementName = "ATCMenuDisabled")]
		public string ATCMenuDisabled { get; set; }

		[XmlElement(ElementName = "FlightRealism")]
		public string FlightRealism { get; set; }

		[XmlElement(ElementName = "WorldRealism")]
		public string WorldRealism { get; set; }

		[XmlElement(ElementName = "UnlimitedFuel")]
		public string UnlimitedFuel { get; set; }

		[XmlElement(ElementName = "AircraftLabels")]
		public string AircraftLabels { get; set; }

		[XmlElement(ElementName = "AvatarNoCollision")]
		public string AvatarNoCollision { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.TimerTrigger")]
	public class SimMissionTimerTrigger
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "StopTime")]
		public double StopTime { get; set; }

		[XmlElement(ElementName = "OnScreenTimer")]
		public string OnScreenTimer { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "Actions")]
		public Actions Actions { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.ScenarioVariable")]
	public class SimMissionScenarioVariable
	{
		public SimMissionScenarioVariable(List<TriggerCondition> v1, string v2, string v3, string v4, string v5, string v6)
		{
			TriggerCondition = v1;
			InstanceId = v2;
			Text = v3;
			Descr = v4;
			Name = v5;
			VariableValue = v6;
		}

		public SimMissionScenarioVariable()
		{
		}

		[XmlElement(ElementName = "TriggerCondition")]
		public List<TriggerCondition> TriggerCondition { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlText]
		public string Text { get; set; }

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Name")]
		public string Name { get; set; }

		[XmlElement(ElementName = "VariableValue")]
		public string VariableValue { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.ScriptAction")]
	public class SimMissionScriptAction
	{
		public SimMissionScriptAction(string v1, string v2, string v3, string v4)
		{
			Descr = v1;
			Script = v2;
			InstanceId = v3;
			Text = v4;
		}

		public SimMissionScriptAction()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Script")]
		public string Script { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlText]
		public string Text { get; set; }
	}

	[XmlRoot(ElementName = "SimMissionUI.ScenarioMetadata")]
	public class SimMissionUIScenarioMetadata
	{
		[XmlElement(ElementName = "SkillLevel")]
		public string SkillLevel { get; set; }

		[XmlElement(ElementName = "LocationDescr")]
		public string LocationDescr { get; set; }

		[XmlElement(ElementName = "DifficultyLevel")]
		public int DifficultyLevel { get; set; }

		[XmlElement(ElementName = "EstimatedTime")]
		public int EstimatedTime { get; set; }

		[XmlElement(ElementName = "UncompletedImage")]
		public string UncompletedImage { get; set; }	

		[XmlElement(ElementName = "CompletedImage")]
		public string CompletedImage { get; set; }

		[XmlElement(ElementName = "ExitMissionImage")]
		public string ExitMissionImage { get; set; }

		[XmlElement(ElementName = "MissionBrief")]
		public string MissionBrief { get; set; }

		[XmlElement(ElementName = "AbbreviatedMissionBrief")]
		public string AbbreviatedMissionBrief { get; set; }

		[XmlElement(ElementName = "SuccessMessage")]
		public string SuccessMessage { get; set; }

		[XmlElement(ElementName = "FailureMessage")]
		public string FailureMessage { get; set; }

		[XmlElement(ElementName = "UserCrashMessage")]
		public string UserCrashMessage { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.DisabledTrafficAirports")]
	public class SimMissionDisabledTrafficAirports
	{
		public SimMissionDisabledTrafficAirports(string v1)
		{
			AirportIdent = v1;
		}

		public SimMissionDisabledTrafficAirports()
		{
		}

		[XmlElement(ElementName = "AirportIdent")]
		public string AirportIdent { get; set; }
	}

	[XmlRoot(ElementName = "TriggerCondition")]
	public class TriggerCondition
	{

		[XmlElement(ElementName = "Actions")]
		public Actions Actions { get; set; }

		[XmlElement(ElementName = "TriggerValue")]
		public TriggerValue TriggerValue { get; set; }
	}

	[XmlRoot(ElementName = "TriggerValue")]
	public class TriggerValue
	{

		[XmlElement(ElementName = "Constant")]
		public Constant Constant { get; set; }
	}

	[XmlRoot(ElementName = "WorldBase.Flight")]
	public class WorldBaseFlight
	{

		[XmlElement(ElementName = "SimContain.Container")]
		public List<SimContainContainer> SimContainContainer { get; set; }

		[XmlElement(ElementName = "SceneryObjects.LibraryObject")]
		public List<SceneryObjectsLibraryObject> SceneryObjectsLibraryObject { get; set; }

		[XmlElement(ElementName = "SimMission.AirportLandingTrigger")]
		public List<SimMissionAirportLandingTrigger> SimMissionAirportLandingTrigger { get; set; }

		[XmlElement(ElementName = "SimMission.AreaLandingTrigger")]
		public List<SimMissionAreaLandingTrigger> SimMissionAreaLandingTrigger { get; set; }

		[XmlElement(ElementName = "SimMission.CloseWindowAction")]
		public List<SimMissionCloseWindowAction> SimMissionCloseWindowAction { get; set; }

		[XmlElement(ElementName = "SimMission.CylinderArea")]
		public List<SimMissionCylinderArea> SimMissionCylinderArea { get; set; }

		[XmlElement(ElementName = "SimMission.DialogAction")]
		public List<SimMissionDialogAction> SimMissionDialogAction { get; set; }

		[XmlElement(ElementName = "SimMission.DisabledTrafficAirports")]
		public SimMissionDisabledTrafficAirports SimMissionDisabledTrafficAirports { get; set; }

		[XmlElement(ElementName = "SimMission.Goal")]
		public List<SimMissionGoal> SimMissionGoal { get; set; }

		[XmlElement(ElementName = "SimMission.GoalResolutionAction")]
		public List<SimMissionGoalResolutionAction> SimMissionGoalResolutionAction { get; set; }

		[XmlElement(ElementName = "SimMission.ObjectActivationAction")]
		public List<SimMissionObjectActivationAction> SimMissionObjectActivationAction { get; set; }

		[XmlElement(ElementName = "SimMission.OneShotSoundAction")]
		public List<SimMissionOneShotSoundAction> SimMissionOneShotSoundAction { get; set; }

		[XmlElement(ElementName = "SimMission.OpenWindowAction")]
		public List<SimMissionOpenWindowAction> SimMissionOpenWindowAction { get; set; }

		[XmlElement(ElementName = "SimMission.PointOfInterest")]
		public List<SimMissionPointOfInterest> SimMissionPointOfInterest { get; set; }

		[XmlElement(ElementName = "SimMission.PointOfInterestActivationAction")]
		public List<SimMissionPointOfInterestActivationAction> SimMissionPointOfInterestActivationAction { get; set; }

		[XmlElement(ElementName = "SimMission.PropertyTrigger")]
		public List<SimMissionPropertyTrigger> SimMissionPropertyTrigger { get; set; }

		[XmlElement(ElementName = "SimMission.ProximityTrigger")]
		public List<SimMissionProximityTrigger> SimMissionProximityTrigger { get; set; }

		[XmlElement(ElementName = "SimMission.RealismOverrides")]
		public SimMissionRealismOverrides SimMissionRealismOverrides { get; set; }

		[XmlElement(ElementName = "SimMission.RectangleArea")]
		public List<SimMissionRectangleArea> SimMissionRectangleArea { get; set; }

		[XmlElement(ElementName = "SimMission.ScaleformPanelWindow")]
		public List<SimMissionScaleformPanelWindow> SimMissionScaleformPanelWindow { get; set; }

		[XmlElement(ElementName = "SimMission.ScenarioVariable")]
		public List<SimMissionScenarioVariable> SimMissionScenarioVariable { get; set; }

		[XmlElement(ElementName = "SimMission.ScriptAction")]
		public List<SimMissionScriptAction> SimMissionScriptAction { get; set; }

		[XmlElement(ElementName = "SimMission.TimerTrigger")]
		public List<SimMissionTimerTrigger> SimMissionTimerTrigger { get; set; }

		[XmlElement(ElementName = "SimMissionUI.ScenarioMetadata")]
		public SimMissionUIScenarioMetadata SimMissionUIScenarioMetadata { get; set; }
	}

	[XmlRoot(ElementName = "WorldBase.Waypoints")]
	public class WorldBaseWaypoints
	{

		[XmlElement(ElementName = "SimContain.WaypointList")]
		public List<SimContainWaypointList> SimContainWaypointList { get; set; }
	}

	#endregion
}
