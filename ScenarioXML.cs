using P3D_Scenario_Generator.CircuitScenario;
using P3D_Scenario_Generator.MapTiles;
using P3D_Scenario_Generator.PhotoTourScenario;
using P3D_Scenario_Generator.SignWritingScenario;
using P3D_Scenario_Generator.WikipediaScenario;
using System.Xml.Serialization;

namespace P3D_Scenario_Generator
{
    public class ScenarioXML
    {
		private static readonly SimBaseDocumentXML simBaseDocumentXML = new();

		static internal void GenerateXMLfile(ScenarioFormData formData)
		{
			SetSimbaseDocumentXML(formData);
			SetWorldBaseFlightXML(formData);
			WriteXML(formData);
		}

		static private void SetSimbaseDocumentXML(ScenarioFormData formData)
        {
			simBaseDocumentXML.Type = "MissionFile";
			simBaseDocumentXML.Descr = $"This is a {formData.ScenarioImageFolder} scenario generated by {Constants.appTitle}. Estimated time to complete: {ScenarioHTML.GetDuration()} minutes.";
			simBaseDocumentXML.Title = $"{ScenarioHTML.overview.Title}";
			WorldBaseFlight worldBaseFlight = new();
			simBaseDocumentXML.WorldBaseFlight = worldBaseFlight;
        }

		static private void SetWorldBaseFlightXML(ScenarioFormData formData)
        {
            switch (formData.ScenarioType)
            {
                case ScenarioTypes.Circuit:
					SetCircuitWorldBaseFlightXML(formData);
                    break;
                case ScenarioTypes.PhotoTour:
                    SetPhotoTourWorldBaseFlightXML(formData);
                    break;
                case ScenarioTypes.SignWriting:
                    SetSignWritingWorldBaseFlightXML(formData);
                    break;
                case ScenarioTypes.Celestial:
                    SetCelestialWorldBaseFlightXML(formData);
                    break;
                case ScenarioTypes.WikiList:
                    SetWikiListWorldBaseFlightXML(formData);
                    break;
                default:
                    break;
            }
        }

        static private void SetCircuitWorldBaseFlightXML(ScenarioFormData formData)
        {
            SetDisabledTrafficAirports($"{Runway.startRwy.IcaoId}");
            SetRealismOverrides();
            SetScenarioMetadata(formData);
            SetDialogAction("Intro01", ScenarioHTML.overview.Briefing, "2", "Text-To-Speech");
            SetDialogAction("Intro02", ScenarioHTML.overview.Tips, "2", "Text-To-Speech");
            SetGoal("Goal01", ScenarioHTML.overview.Objective);
            SetGoalResolutionAction("Goal01");

			// First pass
			for (int gateNo = 1; gateNo < MakeCircuit.gates.Count - 1; gateNo++)
            {
				// Create gate objects (hoop active, hoop inactive and number)
				string hwp = GetGateWorldPosition(MakeCircuit.GetGate(gateNo), Constants.hoopActVertOffset);
                string nwp = GetGateWorldPosition(MakeCircuit.GetGate(gateNo), Constants.numBlueVertOffset);
                string go = GetGateOrientation(MakeCircuit.GetGate(gateNo));
                SetLibraryObject(gateNo, "GEN_game_hoop_ACTIVE", Constants.hoopActGuid, hwp, go, "False", "1", "False");
                SetLibraryObject(gateNo, "GEN_game_hoop_INACTIVE", Constants.hoopInactGuid, hwp, go, "False", "1", "True");
                SetLibraryObject(gateNo, "GEN_game_blue", Constants.numBlueGuid[gateNo], nwp, go, "False", "1", "True");

                // Create sound action to play when each new gate entered
                SetOneShotSoundAction(gateNo, "ThruHoop", "ThruHoop.wav");

                // Create POI object corresponding to the gate number object
                SetPointOfInterest(gateNo, "LibraryObject", "GEN_game_hoop_ACTIVE", "0, 80, 0, 0", "False", "False", "Gate ");

                // Create activate/deactivate POI object actions
                SetPOIactivationAction(gateNo, "PointOfInterest", $"POI", $"ActPOI", "True");
                SetPOIactivationAction(gateNo, "PointOfInterest", $"POI", $"DeactPOI", "False");

                // Create activate/deactivate gate object actions (hoop active and hoop inactive)
                SetObjectActivationAction(gateNo, "LibraryObject", "GEN_game_hoop_ACTIVE", "ActHoopAct", "True");
                SetObjectActivationAction(gateNo, "LibraryObject", "GEN_game_hoop_ACTIVE", "DeactHoopAct", "False");
                SetObjectActivationAction(gateNo, "LibraryObject", "GEN_game_hoop_INACTIVE", "ActHoopInact", "True");
                SetObjectActivationAction(gateNo, "LibraryObject", "GEN_game_hoop_INACTIVE", "DeactHoopInact", "False");

                // Create rectangle area object to put over gate
                SetRectangleArea($"RectangleArea{gateNo:00}", go, "100.0", "25.0", "100.0");
                AttachedWorldPosition awp = GetAttachedWorldPosition(hwp, "False");
                SetAttachedWorldPosition("RectangleArea", $"RectangleArea{gateNo:00}", awp);

                // Create proximity trigger and actions to deactivate gate and POI, and play hoop sound as each gate entered
                SetProximityTrigger(gateNo, "ProximityTrigger", "False");
                SetProximityTriggerArea(gateNo, "RectangleArea", $"RectangleArea{gateNo:00}", "ProximityTrigger");
                SetProximityTriggerOnEnterAction(gateNo, "ObjectActivationAction", "ActHoopInact", gateNo, "ProximityTrigger");
                SetProximityTriggerOnEnterAction(gateNo, "ObjectActivationAction", "DeactHoopAct", gateNo, "ProximityTrigger");
                SetProximityTriggerOnEnterAction(gateNo, "PointOfInterestActivationAction", "DeactPOI", gateNo, "ProximityTrigger");
                SetProximityTriggerOnEnterAction(gateNo, "OneShotSoundAction", "ThruHoop", gateNo, "ProximityTrigger");

                // Create proximity trigger actions to activate and deactivate as required
                SetObjectActivationAction(gateNo, "ProximityTrigger", "ProximityTrigger", "ActProximityTrigger", "True");
                SetObjectActivationAction(gateNo, "ProximityTrigger", "ProximityTrigger", "DeactProximityTrigger", "False");

                // Add deactivate proximity trigger action as event to proximity trigger
                SetProximityTriggerOnEnterAction(gateNo, "ObjectActivationAction", "DeactProximityTrigger", gateNo, "ProximityTrigger");
            }

            // Second pass
            for (int gateNo = 1; gateNo < MakeCircuit.gates.Count - 1; gateNo++)
            {
                // Create proximity trigger actions to activate next gate and POI as each gate entered
                if (gateNo + 1 < MakeCircuit.gates.Count - 1)
                {
                    SetProximityTriggerOnEnterAction(gateNo + 1, "ObjectActivationAction", "ActHoopAct", gateNo, "ProximityTrigger");
                    SetProximityTriggerOnEnterAction(gateNo + 1, "ObjectActivationAction", "DeactHoopInact", gateNo, "ProximityTrigger");
                    SetProximityTriggerOnEnterAction(gateNo + 1, "PointOfInterestActivationAction", "ActPOI", gateNo, "ProximityTrigger");
                }

                // Add activate next gate proximity trigger action as event to proximity trigger
                if (gateNo + 1 < MakeCircuit.gates.Count - 1)
                    SetProximityTriggerOnEnterAction(gateNo + 1, "ObjectActivationAction", "ActProximityTrigger", gateNo, "ProximityTrigger");
            }

            // Create timer trigger to play audio introductions, activate first gate and POI, activate first proximity trigger when scenario starts
            SetTimerTrigger("TimerTrigger01", 1.0, "False", "True");
            SetTimerTriggerAction("DialogAction", "Intro01", "TimerTrigger01");
            SetTimerTriggerAction("DialogAction", "Intro02", "TimerTrigger01");
            SetTimerTriggerAction("ObjectActivationAction", "ActHoopAct01", "TimerTrigger01");
            SetTimerTriggerAction("ObjectActivationAction", "DeactHoopInact01", "TimerTrigger01");
            SetTimerTriggerAction("PointOfInterestActivationAction", "ActPOI01", "TimerTrigger01");
            SetTimerTriggerAction("ObjectActivationAction", "ActProximityTrigger01", "TimerTrigger01");

            // Create airport landing trigger and activation action 
            SetAirportLandingTrigger("AirportLandingTrigger01", "Any", "False", Runway.destRwy.IcaoId);
            SetAirportLandingTriggerAction("GoalResolutionAction", "Goal01", "AirportLandingTrigger01");
            SetObjectActivationAction(1, "AirportLandingTrigger", "AirportLandingTrigger", "ActAirportLandingTrigger", "True");

            // Add activate airport landing trigger action as event to last proximity trigger
            SetProximityTriggerOnEnterAction(1, "ObjectActivationAction", "ActAirportLandingTrigger", MakeCircuit.gates.Count - 2, "ProximityTrigger");
        }

        static private void SetPhotoTourWorldBaseFlightXML(ScenarioFormData formData)
        {
            SetDisabledTrafficAirports($"{Runway.startRwy.IcaoId}");
            SetRealismOverrides();
            SetScenarioMetadata(formData);
            SetDialogAction("Intro01", ScenarioHTML.overview.Briefing, "2", "Text-To-Speech");
            SetDialogAction("Intro02", ScenarioHTML.overview.Tips, "2", "Text-To-Speech");
            SetGoal("Goal01", ScenarioHTML.overview.Objective);
            SetGoalResolutionAction("Goal01");

            // Create scenario variable
            SetScenarioVariable("ScenarioVariable01", "currentLegNo", "1");
            SetScenarioVariableTriggerValue(0.0, 0, "ScenarioVariable01");

            // Create script actions which reference scenario variable
            SetTourScriptActions();

            // Create map window objects
            SetUIPanelWindow(PhotoTour.PhotoCount - 1, "UIpanelWindow", "False", "True", $"images\\MovingMap.html", "False", "False");

            // Create HTML, JavaScript and CSS files for windows
            SetResourcesFile("HTML", "MovingMap.html", formData);
            SetResourcesFile("HTML", "PhotoTour.html", formData);
            SetMovingMapJS(PhotoTour.PhotoTourLegMapEdges, PhotoTour.PhotoCount, formData);
            SetResourcesFile("Javascript", "scriptsPhotoTour.js", formData);
            SetResourcesFile("CSS", "styleMovingMap.css", formData);

            // Create map window open/close actions
            string[] mapWindowParameters = GetMapWindowParameters(formData);
            SetOpenWindowAction(PhotoTour.PhotoCount - 1, "UIPanelWindow", "UIpanelWindow", mapWindowParameters, formData.MapMonitorNumber.ToString());
            SetCloseWindowAction(PhotoTour.PhotoCount - 1, "UIPanelWindow", "UIpanelWindow");

            // Pass 1 - setup proximity triggers, there is a trigger for each photo location
            // ProximityTrigger01 is the first photo trigger, Photo_PhotoTour.PhotoCount - 2 is the last photo trigger
            for (int photoNo = 1; photoNo <= PhotoTour.PhotoCount - 2; photoNo++)
            {
                // Create sound action to play when each new photo location entered
                SetOneShotSoundAction(photoNo, "ThruHoop", "ThruHoop.wav");

                // Create photo window open/close actions
                SetUIPanelWindow(photoNo, "UIpanelWindow", "False", "True", $"images\\PhotoTour.html", "False", "False");
                string[] photoWindowParameters = GetPhotoWindowParameters(photoNo, formData);
                SetOpenWindowAction(photoNo, "UIPanelWindow", "UIpanelWindow", photoWindowParameters, formData.PhotoTourPhotoMonitorNumber.ToString());
                SetCloseWindowAction(photoNo, "UIPanelWindow", "UIpanelWindow");

                // Create cylinder area objects to put over each photo location
                SetCylinderArea(photoNo, "CylinderArea", "0.0,0.0,0.0", formData.PhotoTourHotspotRadius.ToString(), "18520.0", "None");
                string pwp = GetPhotoWorldPosition(PhotoTourUtilities.GetPhotoLocation(PhotoTour.PhotoLocations, photoNo));
                AttachedWorldPosition awp = GetAttachedWorldPosition(pwp, "True");
                SetAttachedWorldPosition("CylinderArea", $"CylinderArea{photoNo:00}", awp);

                // Create proximity trigger 
                SetProximityTrigger(photoNo, "ProximityTrigger", "False");
                SetProximityTriggerArea(photoNo, "CylinderArea", $"CylinderArea{photoNo:00}", "ProximityTrigger");

                // Create proximity trigger actions to activate and deactivate as required
                SetObjectActivationAction(photoNo, "ProximityTrigger", "ProximityTrigger", "ActProximityTrigger", "True");
                SetObjectActivationAction(photoNo, "ProximityTrigger", "ProximityTrigger", "DeactProximityTrigger", "False");

                // Add deactivate proximity trigger action as on enter event to proximity trigger
                SetProximityTriggerOnEnterAction(photoNo, "ObjectActivationAction", "DeactProximityTrigger", photoNo, "ProximityTrigger");
            }

            // Pass 2 - setup proximity triggers on enter actions
            // Each trigger increments leg number scenario variable which leads to updates in html window contents 
            // ProximityTrigger01 is the first photo trigger, Photo_PhotoTour.PhotoCount - 2 is the last photo trigger
            for (int photoNo = 1; photoNo <= PhotoTour.PhotoCount - 2; photoNo++)
            {
				// Play sound
                SetProximityTriggerOnEnterAction(photoNo, "OneShotSoundAction", "ThruHoop", photoNo, "ProximityTrigger");

                // Add activate next gate proximity trigger action as event to proximity trigger
                // itemNo + 1 is next photo location, PhotoTour.PhotoCount - 1 is destination airport
                if (photoNo + 1 < PhotoTour.PhotoCount - 1)
                    SetProximityTriggerOnEnterAction(photoNo + 1, "ObjectActivationAction", "ActProximityTrigger", photoNo, "ProximityTrigger");

                // Open new photo window 
                SetProximityTriggerOnEnterAction(photoNo, "OpenWindowAction", "OpenUIpanelWindow", photoNo, "ProximityTrigger");

                // Close old photo window 
                if (photoNo > 1)
                    SetProximityTriggerOnEnterAction(photoNo - 1, "CloseWindowAction", "CloseUIpanelWindow", photoNo, "ProximityTrigger");

                // Increment photo number
                SetProximityTriggerOnEnterAction(1, "ScriptAction", "ScriptAction", photoNo, "ProximityTrigger");
            }

            // Create timer trigger to play audio introductions and open map window when scenario starts
            SetTimerTrigger("TimerTrigger01", 1.0, "False", "True");
            SetTimerTriggerAction("OpenWindowAction", $"OpenUIpanelWindow{PhotoTour.PhotoCount - 1:00}", "TimerTrigger01");
            SetTimerTriggerAction("DialogAction", "Intro01", "TimerTrigger01");
            SetTimerTriggerAction("DialogAction", "Intro02", "TimerTrigger01");
            SetTimerTriggerAction("ObjectActivationAction", "ActProximityTrigger01", "TimerTrigger01");

            // Create airport landing trigger which does goal resolution and closes windows
            SetAirportLandingTrigger("AirportLandingTrigger01", "Any", "False", Runway.destRwy.IcaoId);
            SetAirportLandingTriggerAction("CloseWindowAction", $"CloseUIpanelWindow{PhotoTour.PhotoCount - 1:00}", "AirportLandingTrigger01");
            SetAirportLandingTriggerAction("CloseWindowAction", $"CloseUIpanelWindow{PhotoTour.PhotoCount - 2:00}", "AirportLandingTrigger01");
            SetAirportLandingTriggerAction("GoalResolutionAction", "Goal01", "AirportLandingTrigger01");
            SetObjectActivationAction(1, "AirportLandingTrigger", "AirportLandingTrigger", "ActAirportLandingTrigger", "True");

            // Add activate airport landing trigger action as event to last proximity trigger 
            SetProximityTriggerOnEnterAction(1, "ObjectActivationAction", "ActAirportLandingTrigger", PhotoTour.PhotoCount - 2, "ProximityTrigger");
        }

        static private void SetSignWritingWorldBaseFlightXML(ScenarioFormData formData)
        {
            SetDisabledTrafficAirports($"{Runway.startRwy.IcaoId}");
            SetRealismOverrides();
            SetScenarioMetadata(formData);
            SetDialogAction("Intro01", ScenarioHTML.overview.Briefing, "2", "Text-To-Speech");
            SetDialogAction("Intro02", ScenarioHTML.overview.Tips, "2", "Text-To-Speech");
            SetGoal("Goal01", ScenarioHTML.overview.Objective);
            SetGoalResolutionAction("Goal01");

            // Create scenario variables
            SetScenarioVariable("ScenarioVariable01", "smokeOn", "0");
            SetScenarioVariableTriggerValue(0.0, 0, "ScenarioVariable01");
            SetScenarioVariable("ScenarioVariable02", "currentGateNo", "0");
            SetScenarioVariableTriggerValue(0.0, 0, "ScenarioVariable02");

            // Create script actions which reference scenario variables
            SetSignWritingScriptActions();

            // First pass
            for (int gateNo = 1; gateNo <= SignWriting.gates.Count; gateNo++)
			{
                // Create gate objects (hoop active, hoop inactive and number)
                string hwp = GetGateWorldPosition(SignWriting.gates[gateNo - 1], Constants.hoopActVertOffset);
                string go = GetGateOrientation(SignWriting.gates[gateNo - 1]);
                SetLibraryObject(gateNo, "GEN_game_hoop_ACTIVE", Constants.hoopActGuid, hwp, go, "False", "1", "False");
                SetLibraryObject(gateNo, "GEN_game_hoop_INACTIVE", Constants.hoopInactGuid, hwp, go, "False", "1", "False");

                // Create sound action to play when each new gate entered
                SetOneShotSoundAction(gateNo, "ThruHoop", "ThruHoop.wav");

                // Create POI object corresponding to the hoop object
                SetPointOfInterest(gateNo, "LibraryObject", "GEN_game_hoop_ACTIVE", "0, 80, 0, 0", "False", "False", "Gate ");

                // Create activate/deactivate POI object actions
                SetPOIactivationAction(gateNo, "PointOfInterest", "POI", "ActPOI", "True");
                SetPOIactivationAction(gateNo, "PointOfInterest", "POI", "DeactPOI", "False");

                // Create activate/deactivate gate object actions (hoop active and hoop inactive)
                SetObjectActivationAction(gateNo, "LibraryObject", "GEN_game_hoop_ACTIVE", "ActHoopAct", "True");
                SetObjectActivationAction(gateNo, "LibraryObject", "GEN_game_hoop_ACTIVE", "DeactHoopAct", "False");
                SetObjectActivationAction(gateNo, "LibraryObject", "GEN_game_hoop_INACTIVE", "ActHoopInact", "True");
                SetObjectActivationAction(gateNo, "LibraryObject", "GEN_game_hoop_INACTIVE", "DeactHoopInact", "False");

                // Create rectangle area object to put over gate
                SetRectangleArea($"RectangleArea{gateNo:00}", go, "100.0", "25.0", "100.0");
                AttachedWorldPosition awp = GetAttachedWorldPosition(hwp, "False");
                SetAttachedWorldPosition("RectangleArea", $"RectangleArea{gateNo:00}", awp);

                // Create proximity trigger and actions 
                SetProximityTrigger(gateNo, "ProximityTrigger", "False");
                SetProximityTriggerArea(gateNo, "RectangleArea", $"RectangleArea{gateNo:00}", "ProximityTrigger");
                // Increment gate number
                SetProximityTriggerOnEnterAction(2, "ScriptAction", "ScriptAction", gateNo, "ProximityTrigger");
                if (gateNo % 2 == 1) // First of gate pair marking a segment
                {
                    // Toggle smoke on
                    SetProximityTriggerOnEnterAction(1, "ScriptAction", "ScriptAction", gateNo, "ProximityTrigger");
                    // Make segment start gate inactive
                    SetProximityTriggerOnEnterAction(gateNo, "ObjectActivationAction", "ActHoopInact", gateNo, "ProximityTrigger");
                    SetProximityTriggerOnEnterAction(gateNo, "ObjectActivationAction", "DeactHoopAct", gateNo, "ProximityTrigger");
                    SetProximityTriggerOnEnterAction(gateNo, "PointOfInterestActivationAction", "DeactPOI", gateNo, "ProximityTrigger");
                }
                else // Second of gate pair marking a segment
                {
                    // Toggle smoke off
                    SetProximityTriggerOnEnterAction(1, "ScriptAction", "ScriptAction", gateNo, "ProximityTrigger");
                    // Hide current inactive segment start gate
                    SetProximityTriggerOnEnterAction(gateNo - 1, "ObjectActivationAction", "DeactHoopInact", gateNo, "ProximityTrigger");
                    // Hide current active segment end gate
                    SetProximityTriggerOnEnterAction(gateNo, "ObjectActivationAction", "DeactHoopAct", gateNo, "ProximityTrigger");
                    SetProximityTriggerOnEnterAction(gateNo, "PointOfInterestActivationAction", "DeactPOI", gateNo, "ProximityTrigger");
                }
                SetProximityTriggerOnEnterAction(gateNo, "OneShotSoundAction", "ThruHoop", gateNo, "ProximityTrigger");

                // Create proximity trigger actions to activate and deactivate as required
                SetObjectActivationAction(gateNo, "ProximityTrigger", "ProximityTrigger", "ActProximityTrigger", "True");
                SetObjectActivationAction(gateNo, "ProximityTrigger", "ProximityTrigger", "DeactProximityTrigger", "False");

                // Add deactivate proximity trigger action as event to proximity trigger
                SetProximityTriggerOnEnterAction(gateNo, "ObjectActivationAction", "DeactProximityTrigger", gateNo, "ProximityTrigger");
            }

            // Second pass
            for (int gateNo = 1; gateNo <= SignWriting.gates.Count; gateNo++)
            {
                if (gateNo % 2 == 1) // First of gate pair marking a segment
                {
                    // Make segment end gate active
                    SetProximityTriggerOnEnterAction(gateNo + 1, "ObjectActivationAction", "ActHoopAct", gateNo, "ProximityTrigger");
                    SetProximityTriggerOnEnterAction(gateNo + 1, "ObjectActivationAction", "DeactHoopInact", gateNo, "ProximityTrigger");
                    SetProximityTriggerOnEnterAction(gateNo + 1, "PointOfInterestActivationAction", "ActPOI", gateNo, "ProximityTrigger");
                }
                else // Second of gate pair marking a segment
                {
                    if (gateNo + 1 < SignWriting.gates.Count)
                    {
                        // Make next segment start gate active
                        SetProximityTriggerOnEnterAction(gateNo + 1, "ObjectActivationAction", "ActHoopAct", gateNo, "ProximityTrigger");
                        SetProximityTriggerOnEnterAction(gateNo + 1, "PointOfInterestActivationAction", "ActPOI", gateNo, "ProximityTrigger");
                        // Show next segment end gate as inactive
                        SetProximityTriggerOnEnterAction(gateNo + 2, "ObjectActivationAction", "ActHoopInact", gateNo, "ProximityTrigger");
                    }
                }

                // Add activate next gate proximity trigger action as event to proximity trigger
                if (gateNo + 1 <= SignWriting.gates.Count)
                    SetProximityTriggerOnEnterAction(gateNo + 1, "ObjectActivationAction", "ActProximityTrigger", gateNo, "ProximityTrigger");
            }

            // Create  window object 
            SetUIPanelWindow(1, "UIpanelWindow", "False", "True", "images\\htmlSignWriting.html", "False", "False");

            // Create HTML, JavaScript and CSS files for window object
            SetSignWritingHTML(formData);
            SetSignWritingJS(formData);
            SetSignWritingCSS(formData);

            // Create  window open/close actions
            SetOpenWindowAction(1, "UIPanelWindow", "UIpanelWindow", GetSignWritingWindowParameters(formData), formData.SignMonitorNumber.ToString());
            SetCloseWindowAction(1, "UIPanelWindow", "UIpanelWindow");

            // Create timer trigger to play audio introductions, activate first gate and POI, activate first proximity trigger when scenario starts
            SetTimerTrigger("TimerTrigger01", 1.0, "False", "True");
            SetTimerTriggerAction("DialogAction", "Intro01", "TimerTrigger01");
            SetTimerTriggerAction("DialogAction", "Intro02", "TimerTrigger01");
            SetTimerTriggerAction("ObjectActivationAction", "ActHoopAct01", "TimerTrigger01");
            SetTimerTriggerAction("ObjectActivationAction", "DeactHoopInact01", "TimerTrigger01");
            SetTimerTriggerAction("PointOfInterestActivationAction", $"ActPOI01", "TimerTrigger01");
            SetTimerTriggerAction("ObjectActivationAction", "ActProximityTrigger01", "TimerTrigger01");
            SetTimerTriggerAction("ObjectActivationAction", "ActHoopInact02", "TimerTrigger01");
            SetTimerTriggerAction("OpenWindowAction", "OpenUIpanelWindow01", "TimerTrigger01");

            // Create airport landing trigger and activation action 
            SetAirportLandingTrigger("AirportLandingTrigger01", "Any", "False", Runway.destRwy.IcaoId);
            SetAirportLandingTriggerAction("CloseWindowAction", "CloseUIpanelWindow01", "AirportLandingTrigger01");
            SetAirportLandingTriggerAction("GoalResolutionAction", "Goal01", "AirportLandingTrigger01");
            SetObjectActivationAction(1, "AirportLandingTrigger", "AirportLandingTrigger", "ActAirportLandingTrigger", "True");

            // Add activate airport landing trigger action as event to last proximity trigger
            SetProximityTriggerOnEnterAction(1, "ObjectActivationAction", "ActAirportLandingTrigger", SignWriting.gates.Count, "ProximityTrigger");
        }

        static private void SetCelestialWorldBaseFlightXML(ScenarioFormData formData)
        {
            SetDisabledTrafficAirports($"{Runway.destRwy.IcaoId}");
            SetRealismOverrides();
            SetScenarioMetadata(formData);
            SetDialogAction("Intro01", ScenarioHTML.overview.Briefing, "2", "Text-To-Speech");
            SetDialogAction("Intro02", ScenarioHTML.overview.Tips, "2", "Text-To-Speech");
            SetGoal("Goal01", ScenarioHTML.overview.Objective);
            SetGoalResolutionAction("Goal01");

            // Create sextant window object
            SetUIPanelWindow(1, "CelestialSextant", "False", "True", "images\\htmlCelestialSextant.html", "False", "True");
			SetOpenWindowAction(1, "UIPanelWindow", "CelestialSextant", ["986", "755", "20", "20"], "2");
            SetCloseWindowAction(1, "UIPanelWindow", "CelestialSextant");

            // Create onscreen text object for displaying error message from sextant
            SetOnScreenText("CelestialErrorMessage01", "Star not in FOV", "Center", "0.000000,0.000000,0.000000,255.000000", "False", "White");
            SetObjectActivationAction(1, "OnScreenText", "CelestialErrorMessage", "DisplayCelestialErrorMessage", "True");
            SetObjectActivationAction(1, "OnScreenText", "CelestialErrorMessage", "HideCelestialErrorMessage", "False");

            // Create timer trigger for hiding onscreen text sextant message after 10 seconds
            SetTimerTrigger("TimerTrigger01", 10.0, "False", "False");
			SetTimerTriggerAction("ObjectActivationAction", "HideCelestialErrorMessage01", "TimerTrigger01");
            SetObjectActivationAction(1, "TimerTrigger", "TimerTrigger", "ActTimerTrigger", "True");

			// Create scenario variable which when set to 1.0 displays error message and activates trigger to hide message after 10 seconds
			SetScenarioVariable("CelestialErrorMessage01", "errorMsgVar", "0");
			SetScenarioVariableAction("ObjectActivationAction", "DisplayCelestialErrorMessage01", 0, "CelestialErrorMessage01");
			SetScenarioVariableAction("ObjectActivationAction", "ActTimerTrigger01", 0, "CelestialErrorMessage01");
			SetScenarioVariableTriggerValue(1.0, 0, "CelestialErrorMessage01");

            // Create timer trigger to play audio introductions and open sextant window when scenario starts
            SetTimerTrigger("TimerTrigger02", 1.0, "False", "True");
            SetTimerTriggerAction("OpenWindowAction", "OpenCelestialSextant01", "TimerTrigger02");
            SetTimerTriggerAction("DialogAction", "Intro01", "TimerTrigger02");
            SetTimerTriggerAction("DialogAction", "Intro02", "TimerTrigger02");

            // Create airport landing trigger which does goal resolution - starts activated
            SetAirportLandingTrigger("AirportLandingTrigger01", "Any", "True", Runway.destRwy.IcaoId);
            SetAirportLandingTriggerAction("CloseWindowAction", "CloseCelestialSextant01", "AirportLandingTrigger01");
            SetAirportLandingTriggerAction("GoalResolutionAction", "Goal01", "AirportLandingTrigger01");
        }

        static private void SetWikiListWorldBaseFlightXML(ScenarioFormData formData)
        {
            SetDisabledTrafficAirports($"{Runway.startRwy.IcaoId}");
            SetRealismOverrides();
            SetScenarioMetadata(formData);
            SetDialogAction("Intro01", ScenarioHTML.overview.Briefing, "2", "Text-To-Speech");
            SetDialogAction("Intro02", ScenarioHTML.overview.Tips, "2", "Text-To-Speech");
            SetGoal("Goal01", ScenarioHTML.overview.Objective);
            SetGoalResolutionAction("Goal01");

            // Create scenario variable
            SetScenarioVariable("ScenarioVariable01", "currentLegNo", "1");
            SetScenarioVariableTriggerValue(0.0, 0, "ScenarioVariable01");

            // Create script actions which reference scenario variable
            SetTourScriptActions();

            // Create window objects 
            SetUIPanelWindow(1, "UIpanelWindow", "False", "True", $"images\\MovingMap.html", "False", "False");
            SetUIPanelWindow(2, "UIpanelWindow", "False", "True", $"images\\WikipediaItem.html", "False", "False");

            // Create HTML, JavaScript and CSS files for windows
            SetResourcesFile("HTML", "MovingMap.html", formData);
            SetMovingMapJS(Wikipedia.WikiLegMapEdges, Wikipedia.WikiCount, formData);
            SetResourcesFile("CSS", "styleMovingMap.css", formData);
            SetResourcesFile("HTML", "WikipediaItem.html", formData);
            SetWikiTourJS(formData);

            // Create window open/close actions
            string[] mapWindowParameters = GetMapWindowParameters(formData);
            SetOpenWindowAction(1, "UIPanelWindow", "UIpanelWindow", mapWindowParameters, formData.MapMonitorNumber.ToString());
            SetCloseWindowAction(1, "UIPanelWindow", "UIpanelWindow");
            string[] wikiURLwindowDimensions = GetWikiURLWindowParameters(formData);
            SetOpenWindowAction(2, "UIPanelWindow", "UIpanelWindow", wikiURLwindowDimensions, formData.WikiURLMonitorNumber.ToString());
            SetCloseWindowAction(2, "UIPanelWindow", "UIpanelWindow");

            // Pass 1 - setup proximity triggers, there is a trigger for each wiki item location
            // Each trigger updates leg route images. ProximityTrigger01 is the first wiki item trigger,
            // Wikipedia.WikiCount - 2 is the last wiki item trigger
            for (int legNo = 1; legNo <= Wikipedia.WikiCount - 2; legNo++)
            {
                // Create cylinder area objects to put over each photo location
                SetCylinderArea(legNo, "CylinderArea", "0.0,0.0,0.0", "300", "18520.0", "None");
                string pwp = GetWikiItemWorldPosition(legNo);
                AttachedWorldPosition awp = GetAttachedWorldPosition(pwp, "True");
                SetAttachedWorldPosition("CylinderArea", $"CylinderArea{legNo:00}", awp);

                // Create proximity trigger 
                SetProximityTrigger(legNo, "ProximityTrigger", "False");
                SetProximityTriggerArea(legNo, "CylinderArea", $"CylinderArea{legNo:00}", "ProximityTrigger");

                // Create proximity trigger actions to activate and deactivate as required
                SetObjectActivationAction(legNo, "ProximityTrigger", "ProximityTrigger", "ActProximityTrigger", "True");
                SetObjectActivationAction(legNo, "ProximityTrigger", "ProximityTrigger", "DeactProximityTrigger", "False");

                // Add deactivate proximity trigger action as on enter event to proximity trigger
                SetProximityTriggerOnEnterAction(legNo, "ObjectActivationAction", "DeactProximityTrigger", legNo, "ProximityTrigger");
            }

            // Pass 2 - setup proximity triggers on enter actions, each trigger increments leg number scenario variable 
            for (int legNo = 1; legNo <= Wikipedia.WikiCount - 2; legNo++)
            {
                // Add activate next gate proximity trigger action as event to proximity trigger
                // legNo + 1 is next wiki item location, Wikipedia.WikiCount - 1 is destination airport
                if (legNo + 1 < Wikipedia.WikiCount - 1)
                    SetProximityTriggerOnEnterAction(legNo + 1, "ObjectActivationAction", "ActProximityTrigger", legNo, "ProximityTrigger");

                // Increment gate number
                SetProximityTriggerOnEnterAction(1, "ScriptAction", "ScriptAction", legNo, "ProximityTrigger");
            }

            // Create timer trigger to play audio introductions and open window when scenario starts
            SetTimerTrigger("TimerTrigger01", 1.0, "False", "True");
            SetTimerTriggerAction("OpenWindowAction", "OpenUIpanelWindow01", "TimerTrigger01");
            SetTimerTriggerAction("OpenWindowAction", "OpenUIpanelWindow02", "TimerTrigger01");
            SetTimerTriggerAction("DialogAction", "Intro01", "TimerTrigger01");
            SetTimerTriggerAction("DialogAction", "Intro02", "TimerTrigger01");
            SetTimerTriggerAction("ObjectActivationAction", "ActProximityTrigger01", "TimerTrigger01");

            // Create airport landing trigger which does goal resolution and closes window
            SetAirportLandingTrigger("AirportLandingTrigger01", "Any", "False", Wikipedia.WikiTour[^1].airportICAO);
            SetAirportLandingTriggerAction("CloseWindowAction", $"CloseUIpanelWindow01", "AirportLandingTrigger01");
            SetAirportLandingTriggerAction("CloseWindowAction", $"CloseUIpanelWindow02", "AirportLandingTrigger01");
            SetAirportLandingTriggerAction("GoalResolutionAction", "Goal01", "AirportLandingTrigger01");
            SetObjectActivationAction(1, "AirportLandingTrigger", "AirportLandingTrigger", "ActAirportLandingTrigger", "True");

            // Add activate airport landing trigger action as event to last proximity trigger 
            SetProximityTriggerOnEnterAction(1, "ObjectActivationAction", "ActAirportLandingTrigger", Wikipedia.WikiCount - 2, "ProximityTrigger");
        }

        static private void SetTestingWorldBaseFlightXML(ScenarioFormData formData)
        {
            SetUIPanelWindow(1, "UIpanelWindow", "False", "True", $"images\\PhotoTour.html", "False", "False");
            string[] photoWindowParameters = GetPhotoWindowParameters(1, formData);
            SetOpenWindowAction(1, "UIPanelWindow", "UIpanelWindow", photoWindowParameters, formData.PhotoTourPhotoMonitorNumber.ToString());
            SetTimerTrigger("TimerTrigger01", 1.0, "False", "True");
            SetTimerTriggerAction("OpenWindowAction", "OpenUIpanelWindow01", "TimerTrigger01");
        }

        static private void WriteXML(ScenarioFormData formData)
        {
            XmlSerializer xmlSerializer = new(simBaseDocumentXML.GetType());

            using StreamWriter writer = new($"{formData.ScenarioFolder}\\{formData.ScenarioTitle}.xml");
            xmlSerializer.Serialize(writer, simBaseDocumentXML);
            writer.Close();

            RemoveXMLNSattributes($"{formData.ScenarioFolder}\\{formData.ScenarioTitle}.xml");
        }

        /// <summary>
        /// Removes xmlns:xsi and xmlns:xsd attributes from XML file, assumed to be on second line and in that order.
        /// </summary>
        /// <param name="filePath">The XML file to be processed</param>
        static internal void RemoveXMLNSattributes(string filePath)
        {
            string attributeXSI = "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"";
            string attributeXSD = "xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"";
            StreamReader sr = new(filePath);
            StreamWriter sw = new(filePath + ".tmp");

            // Leave first line unchanged
            string line = sr.ReadLine();
            sw.WriteLine(line);

            // Remove attributes from second line
            line = sr.ReadLine();
            int indexXSI = line.IndexOf(attributeXSI);
            int indexXSD = line.IndexOf(attributeXSD);
            string newLine = line[0..indexXSI]; // Content before attributeXSI
            newLine += line[(indexXSD + attributeXSD.Length)..]; // Add content after attributeXSD
            sw.WriteLine(newLine);

            // Leave remaining lines unchanged
            while (line != null)
            {
                line = sr.ReadLine();
                sw.WriteLine(line);
            }
            sr.Close();
            sw.Close();
            File.Copy(filePath + ".tmp", filePath, true);
            FileOps.TryDeleteFile(filePath + ".tmp");
        }

        #region Object creation/editing utilities

        static private AttachedWorldPosition GetAttachedWorldPosition(string worldPosition, string AltitudeIsAGL)
        {
            AttachedWorldPosition awp = new(worldPosition, AltitudeIsAGL);
            return awp;
        }

        static private string GetGateOrientation(Gate gate)
        {
            return $"{string.Format("{0:0.0}", gate.pitch)},0.0,{string.Format("{0:0.0}", gate.orientation)}";
        }

        static private string GetGateWorldPosition(Gate gate, double vertOffset)
        {
            return $"{ScenarioFXML.FormatCoordXML(gate.lat, "N", "S", false)},{ScenarioFXML.FormatCoordXML(gate.lon, "E", "W", false)},+{gate.amsl + vertOffset}";
        }

        static private string GetGUID()
		{
            Guid guid = System.Guid.NewGuid();
			string guidUpper = guid.ToString().ToUpper();
            return $"{{{guidUpper}}}";
        }

        static private ObjectReference GetObjectReference(string objName, string search)
        {
            ObjectReference or = new();
            int idIndex;
            switch (objName)
            {
                case "AirportLandingTrigger":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger[idIndex].InstanceId);
                    break;
                case "CloseWindowAction":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionCloseWindowAction.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionCloseWindowAction[idIndex].InstanceId);
                    break;
                case "CylinderArea":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionCylinderArea.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionCylinderArea[idIndex].InstanceId);
                    break;
                case "DialogAction":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionDialogAction.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionDialogAction[idIndex].InstanceId);
                    break;
                case "Goal":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionGoal.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionGoal[idIndex].InstanceId);
                    break;
                case "GoalResolutionAction":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionGoalResolutionAction.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionGoalResolutionAction[idIndex].InstanceId);
                    break;
                case "LibraryObject":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SceneryObjectsLibraryObject.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SceneryObjectsLibraryObject[idIndex].InstanceId);
                    break;
                case "ObjectActivationAction":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction[idIndex].InstanceId);
                    break;
                case "OneShotSoundAction":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionOneShotSoundAction.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionOneShotSoundAction[idIndex].InstanceId);
                    break;
                case "OnScreenText":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionOnScreenText.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionOnScreenText[idIndex].InstanceId);
                    break;
                case "OpenWindowAction":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionOpenWindowAction.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionOpenWindowAction[idIndex].InstanceId);
                    break;
                case "PointOfInterest":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionPointOfInterest.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionPointOfInterest[idIndex].InstanceId);
                    break;
                case "PointOfInterestActivationAction":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionPointOfInterestActivationAction.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionPointOfInterestActivationAction[idIndex].InstanceId);
                    break;
                case "ProximityTrigger":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger[idIndex].InstanceId);
                    break;
                case "RectangleArea":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionRectangleArea.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionRectangleArea[idIndex].InstanceId);
                    break;
                case "ScaleformPanelWindow":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionScaleformPanelWindow[idIndex].InstanceId);
                    break;
                case "ScriptAction":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionScriptAction.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionScriptAction[idIndex].InstanceId);
                    break;
                case "TimerTrigger":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionTimerTrigger.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionTimerTrigger[idIndex].InstanceId);
                    break;
                case "UIPanelWindow":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionUIPanelWindow.FindIndex(o => o.Descr == search);
                    or = new(simBaseDocumentXML.WorldBaseFlight.SimMissionUIPanelWindow[idIndex].InstanceId);
                    break;
                default:
                    break;
            }
            return or;
        }

        static private string[] GetMapWindowParameters(ScenarioFormData formData)
        {
            // Dimensions
            int mapWindowWidth = 512;
            int mapWindowHeight = 512;
            if (formData.MapWindowSize == 1024)
            {
                mapWindowWidth = 1024;
                mapWindowHeight = 1024;
            }
            if (formData.ScenarioType == ScenarioTypes.PhotoTour)
            {
                return GetWindowParameters(mapWindowWidth, mapWindowHeight, formData.MapAlignment,
                formData.MapMonitorWidth, formData.MapMonitorHeight, formData.MapOffset);
            }
            else if (formData.ScenarioType == ScenarioTypes.WikiList)
            {
                return GetWindowParameters(mapWindowWidth, mapWindowHeight, formData.MapAlignment,
                formData.MapMonitorWidth, formData.MapMonitorHeight, formData.MapOffset);
            }
            else
                return null;
            
        }

        static private string[] GetPhotoWindowParameters(int photoNo, ScenarioFormData formData)
        {
            string bitmapFilename = $"{formData.ScenarioImageFolder}\\photo_{photoNo:00}.jpg";
            using Bitmap drawing = new(bitmapFilename);
            return GetWindowParameters(drawing.Width, drawing.Height, formData.PhotoTourPhotoAlignment,
                formData.PhotoTourPhotoMonitorWidth, formData.PhotoTourPhotoMonitorHeight, formData.PhotoTourPhotoOffset);
        }

        static private string[] GetWikiURLWindowParameters(ScenarioFormData formData)
        {
            return GetWindowParameters(formData.WikiURLWindowWidth, formData.WikiURLWindowHeight, formData.WikiURLAlignment,
                formData.WikiURLMonitorWidth, formData.WikiURLMonitorHeight, formData.WikiURLOffset);
        }

        static private string[] GetWindowParameters(int windowWidth, int windowHeight, string alignment, int monitorWidth, int monitorHeight, int offset)
        {
            int horizontalOffset, verticalOffset;
            // Offsets
            if (alignment == "Top Left")
            {
                horizontalOffset = offset;
                verticalOffset = offset;
            }
            else if (alignment == "Top Right")
            {
                horizontalOffset = monitorWidth - offset - windowWidth;
                verticalOffset = offset;
            }
            else if (alignment == "Bottom Right")
            {
                horizontalOffset = monitorWidth - offset - windowWidth;
                verticalOffset = monitorHeight - offset - windowHeight;
            }
            else if (alignment == "Bottom Left")
            {
                horizontalOffset = offset;
                verticalOffset = monitorHeight - offset - windowHeight;
            }
            else // alignment == "Centered"
            {
                horizontalOffset = (monitorWidth / 2) - (windowWidth / 2);
                verticalOffset = (monitorHeight / 2) - (windowHeight / 2);
            }

            return [windowWidth.ToString(), windowHeight.ToString(), horizontalOffset.ToString(), verticalOffset.ToString()];
        }

        static private string GetPhotoWorldPosition(PhotoLocParams photoLegParams)
        {
            return $"{ScenarioFXML.FormatCoordXML(photoLegParams.latitude, "N", "S", true)}, " +
				$"{ScenarioFXML.FormatCoordXML(photoLegParams.longitude, "E", "W", true)},+0.0";
        }

        static private string[] GetSignWritingWindowParameters(ScenarioFormData formData)
		{
            // Each character approx 80 pixels wide + 20 pixels padding before it, then extra 40 pixels at end of message
            int windowWidth = (formData.SignMessage.Length * 100) + 40;
            if (windowWidth > formData.SignMonitorWidth - 40)
                windowWidth = formData.SignMonitorWidth - 40;

            // Each character approx 160 pixels high + 20 pixels above it and 60 pixels below it 
            int windowHeight = 240;

            int horizontalOffset;
            int verticalOffset;
            // Offsets
            if (formData.SignAlignment == "Top Left")
            {
                horizontalOffset = formData.SignOffset;
                verticalOffset = formData.SignOffset;
            }
            else if (formData.SignAlignment == "Top Right")
            {
                horizontalOffset = formData.SignMonitorWidth - formData.SignOffset - windowWidth;
                verticalOffset = formData.SignOffset;
            }
            else if (formData.SignAlignment == "Bottom Right")
            {
                horizontalOffset = formData.SignMonitorWidth - formData.SignOffset - windowWidth;
                verticalOffset = formData.SignMonitorHeight - formData.SignOffset - windowHeight;
            }
            else if (formData.SignAlignment == "Bottom Left")
            {
                horizontalOffset = formData.SignOffset;
                verticalOffset = formData.SignMonitorHeight - formData.SignOffset - windowHeight;
            }
            else // Parameters.SignAlignment == "Centered"
            {
                horizontalOffset = (formData.SignMonitorWidth / 2) - (windowWidth / 2);
                verticalOffset = (formData.SignMonitorHeight / 2) - (windowHeight / 2);
            }

            return [windowWidth.ToString(), windowHeight.ToString(), horizontalOffset.ToString(), verticalOffset.ToString()];
        }

        static private string GetWikiItemWorldPosition(int legNo)
        {
            return $"{Wikipedia.WikiTour[legNo].latitude}, {Wikipedia.WikiTour[legNo].longitude},+0.0";
        }

        static private void SetAirportLandingTrigger(string descr, string landingType, string activated, string airportIdent)
        {
            List<ObjectReference> orList = [];
            SimMissionAirportLandingTrigger alt = new(descr, landingType, activated, new Actions(orList), GetGUID(), airportIdent, null);
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger.Add(alt);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger = [alt];

        }

        static private void SetAirportLandingTriggerAction(string objName, string orSearch, string tSearch)
        {
            ObjectReference or = GetObjectReference(objName, orSearch);
            int idIndex;
            idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger.FindIndex(o => o.Descr == tSearch);
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger[idIndex].Actions != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger[idIndex].Actions.ObjectReference.Add(or);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger[idIndex].Actions = new Actions([or]);
        }

		static private void SetAirportLandingTriggerRunwayFilter(string rwyNumber, string rwyDesignator, string tSearch)
		{
            if (!int.TryParse(rwyNumber, out int rwyNumberInt))
            {
                int rcIdIndex = Runway.RunwayCompassIds.FindIndex(runwayCompassId => runwayCompassId.AbbrName == rwyNumber);
                rwyNumber = Runway.RunwayCompassIds[rcIdIndex].Number;
            }
			RunwayFilter rf = new(rwyNumber, rwyDesignator);
			int idIndex;
			idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger.FindIndex(o => o.Descr == tSearch);
			simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger[idIndex].RunwayFilter = rf;
        }

        static private void SetAttachedWorldPosition(string objName, string search, AttachedWorldPosition wp)
        {
            int idIndex;
            switch (objName)
            {
                case "CylinderArea":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionCylinderArea.FindIndex(o => o.Descr == search);
                    simBaseDocumentXML.WorldBaseFlight.SimMissionCylinderArea[idIndex].AttachedWorldPosition = wp;
                    break;
                case "RectangleArea":
                    idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionRectangleArea.FindIndex(o => o.Descr == search);
					simBaseDocumentXML.WorldBaseFlight.SimMissionRectangleArea[idIndex].AttachedWorldPosition = wp;
                    break;
                default:
                    break;
            }
        }

        static private void SetCloseWindowAction(int index, string objName, string search)
        {
            search = $"{search}{index:00}";
            ObjectReference or = GetObjectReference(objName, search);
            SimMissionCloseWindowAction cwa = new($"Close{search}", or, GetGUID());
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionCloseWindowAction != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionCloseWindowAction.Add(cwa);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionCloseWindowAction = [cwa];
        }

        static private void SetCylinderArea(int index, string descr, string orientation, string radius, string height, string drawStyle)
        {
            descr = $"{descr}{index:00}";
            SimMissionCylinderArea ca = new(descr, orientation, radius, height, drawStyle, new AttachedWorldPosition(), GetGUID());
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionCylinderArea != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionCylinderArea.Add(ca);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionCylinderArea = [ca];
        }

        static private void SetDialogAction(string descr, string text, string delay, string soundType)
        {
            SimMissionDialogAction da = new(descr, text, delay, soundType, GetGUID());
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionDialogAction != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionDialogAction.Add(da);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionDialogAction = [da];
        }

        static private void SetDisabledTrafficAirports(string airportIdent)
        {
            SimMissionDisabledTrafficAirports dta = new(airportIdent);
            simBaseDocumentXML.WorldBaseFlight.SimMissionDisabledTrafficAirports = dta;
        }

        static private void SetPointOfInterest(int index, string objName, string search, string offsetXYZ, string curSel, string activated, string targetName)
        {
            search = $"{search}{index:00}";
            targetName = $"{targetName}{index:00}";
            ObjectReference or = GetObjectReference(objName, search);
			AttachedWorldObject awo = new(or, offsetXYZ);
            SimMissionPointOfInterest poi = new($"POI{index:00}", targetName, curSel, awo, GetGUID(), activated, index);
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionPointOfInterest != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionPointOfInterest.Add(poi);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionPointOfInterest = [poi];
        }

        static private void SetGoal(string descr, string text)
        {
            SimMissionGoal g = new(descr, text, GetGUID());
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionGoal != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionGoal.Add(g);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionGoal = [g];
        }

        static private void SetGoalResolutionAction(string search)
        {
            ObjectReference or = GetObjectReference("Goal", search);
            List <ObjectReference> orList = new([or]);
			SimMissionGoalResolutionAction gra = new("Completed", search, new Goals(orList), GetGUID());
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionGoalResolutionAction != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionGoalResolutionAction.Add(gra);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionGoalResolutionAction = [gra];
        }

        static private void SetLibraryObject(int index, string descr, string mdlGUID, string worldPos, string orient, string altIsAGL, string scale, string isAct)
        {
			descr = $"{descr}{index:00}";
            SceneryObjectsLibraryObject lo = new(descr, mdlGUID, worldPos, orient, altIsAGL, scale, GetGUID(), isAct);
            if (simBaseDocumentXML.WorldBaseFlight.SceneryObjectsLibraryObject != null)
                simBaseDocumentXML.WorldBaseFlight.SceneryObjectsLibraryObject.Add(lo);
            else
                simBaseDocumentXML.WorldBaseFlight.SceneryObjectsLibraryObject = [lo];
        }

        static private void SetMovingMapJS(List<MapEdges> mapEdges, int count, ScenarioFormData formData)
        {
            string saveLocation = $"{formData.ScenarioImageFolder}\\scriptsMovingMap.js";
            Stream stream = Form.GetResourceStream("Javascript.scriptsMovingMap.js");
            StreamReader reader = new(stream);
            string movingMapJS = reader.ReadToEnd();

            // Set map edges
            string mapNorth = mapEdges[0].north.ToDouble().ToString();
            string mapEast = mapEdges[0].east.ToDouble().ToString();
            string mapSouth = mapEdges[0].south.ToDouble().ToString();
            string mapWest = mapEdges[0].west.ToDouble().ToString();
            for (int legNo = 1; legNo < count - 1; legNo++)
            {
                mapNorth += ", " + mapEdges[legNo].north.ToDouble().ToString();
                mapEast += ", " + mapEdges[legNo].east.ToDouble().ToString();
                mapSouth += ", " + mapEdges[legNo].south.ToDouble().ToString();
                mapWest += ", " + mapEdges[legNo].west.ToDouble().ToString();
            }
            movingMapJS = movingMapJS.Replace("mapNorthX", mapNorth);
            movingMapJS = movingMapJS.Replace("mapEastX", mapEast);
            movingMapJS = movingMapJS.Replace("mapSouthX", mapSouth);
            movingMapJS = movingMapJS.Replace("mapWestX", mapWest);

            // Set map size related values
            if (formData.MapWindowSize == 512)
            {
                movingMapJS = movingMapJS.Replace("imagePixelsX", "512, 1024, 2048");
                movingMapJS = movingMapJS.Replace("viewPortWidthX", "512");
                movingMapJS = movingMapJS.Replace("viewPortHeightX", "512");
                movingMapJS = movingMapJS.Replace("zoom1FilenameSuffixX", "1");
                movingMapJS = movingMapJS.Replace("zoom2FilenameSuffixX", "2");
                movingMapJS = movingMapJS.Replace("zoom3FilenameSuffixX", "3");
            }
            else
            {
                movingMapJS = movingMapJS.Replace("imagePixelsX", "1024, 2048, 4096");
                movingMapJS = movingMapJS.Replace("viewPortWidthX", "1024");
                movingMapJS = movingMapJS.Replace("viewPortHeightX", "1024");
                movingMapJS = movingMapJS.Replace("zoom1FilenameSuffixX", "2");
                movingMapJS = movingMapJS.Replace("zoom2FilenameSuffixX", "3");
                movingMapJS = movingMapJS.Replace("zoom3FilenameSuffixX", "4");
            }



            File.WriteAllText(saveLocation, movingMapJS);
            stream.Dispose();
        }

        static private void SetObjectActivationAction(int index, string objName, string search, string descr, string newObjectState)
        {
            search = $"{search}{index:00}";
            descr = $"{descr}{index:00}";
            ObjectReference or = GetObjectReference(objName, search);
			ObjectReferenceList orList = new([or]);
			SimMissionObjectActivationAction oaa = new(descr, orList, GetGUID(), newObjectState);
			if (simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction != null )
				simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction.Add(oaa);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction = [oaa];
        }

        static private void SetOneShotSoundAction(int index, string descr, string soundFile)
        {
            descr = $"{descr}{index:00}";
            SimMissionOneShotSoundAction ossa = new(descr, soundFile, GetGUID());
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionOneShotSoundAction != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionOneShotSoundAction.Add(ossa);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionOneShotSoundAction = [ossa];
        }

        static private void SetOnScreenText(string descr, string text, string onScrLoc, string RGBcol, string activated, string backCol)
        {
            SimMissionOnScreenText ost = new(descr, text, onScrLoc, RGBcol, activated, backCol, GetGUID());
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionOnScreenText != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionOnScreenText.Add(ost);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionOnScreenText = [ost];
        }

        static private void SetOpenWindowAction(int index, string objName, string search, string[] windowParameters, string monitorNo)
        {
            search = $"{search}{index:00}";
            SetWindowSize sws = new(windowParameters[0], windowParameters[1]);
            SetWindowLocation swl = new(windowParameters[2], windowParameters[3]);
            ObjectReference or = GetObjectReference(objName, search);
			SimMissionOpenWindowAction owa = new($"Open{search}", sws, swl, monitorNo, or, GetGUID());
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionOpenWindowAction != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionOpenWindowAction.Add(owa);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionOpenWindowAction = [owa];
        }

        static private void SetPOIactivationAction(int index, string objName, string search, string descr, string newObjectState)
        {
            search = $"{search}{index:00}";
            descr = $"{descr}{index:00}";
            ObjectReference or = GetObjectReference(objName, search);
            ObjectReferenceList orList = new([or]);
			SimMissionPointOfInterestActivationAction paa = new(descr, orList, GetGUID(), newObjectState);
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionPointOfInterestActivationAction != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionPointOfInterestActivationAction.Add(paa);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionPointOfInterestActivationAction = [paa];
        }

        static private void SetProximityTrigger(int index, string descr, string activated)
        {
            descr = $"{descr}{index:00}";
            List<ObjectReference> aList = [];
            List<ObjectReference> enterList = [];
            List<ObjectReference> exitList = [];
            SimMissionProximityTrigger pt = new(descr, new Areas(aList), new OnEnterActions(enterList), GetGUID(), activated, new OnExitActions(exitList));
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger.Add(pt);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger = [pt];
        }

        static private void SetProximityTriggerArea(int index, string objName, string orSearch, string tSearch)
        {
            tSearch = $"{tSearch}{index:00}";
            ObjectReference or = GetObjectReference(objName, orSearch);
            int idIndex;
            idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger.FindIndex(o => o.Descr == tSearch);
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger[idIndex].Areas != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger[idIndex].Areas.ObjectReference.Add(or);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger[idIndex].Areas = new Areas([or]);
        }

        static private void SetProximityTriggerOnEnterAction(int oIndex, string objName, string orSearch, int tIndex, string tSearch)
        {
            orSearch = $"{orSearch}{oIndex:00}";
            tSearch = $"{tSearch}{tIndex:00}";
            ObjectReference or = GetObjectReference(objName, orSearch);
            int idIndex;
            idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger.FindIndex(o => o.Descr == tSearch);
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger[idIndex].OnEnterActions != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger[idIndex].OnEnterActions.ObjectReference.Add(or);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger[idIndex].OnEnterActions = new OnEnterActions([or]);
        }

        static private void SetRealismOverrides()
        {
            SimMissionRealismOverrides ro = new()
            {
                Descr = "RealismOverrides",
                CrashBehavior = "UserSpecified",
                ATCMenuDisabled = "False",
                FlightRealism = "UserSpecified",
                WorldRealism = "UserSpecified",
                AircraftLabels = "UserSpecified",
                AvatarNoCollision = "UserSpecified",
                UnlimitedFuel = "UserSpecified"
            };
            simBaseDocumentXML.WorldBaseFlight.SimMissionRealismOverrides = ro;
        }

        static private void SetRectangleArea(string descr, string orientation, string length, string width, string height)
        {
            SimMissionRectangleArea ra = new(descr, orientation, length, width, height, new AttachedWorldPosition(), GetGUID());
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionRectangleArea != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionRectangleArea.Add(ra);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionRectangleArea = [ra];
        }

        static private void SetResourcesFile(string resourceFolder, string resourceFileName, ScenarioFormData formData)
        {
            string saveLocation = $"{formData.ScenarioImageFolder}\\{resourceFileName}";
            Stream stream = Form.GetResourceStream($"{resourceFolder}.{resourceFileName}");
            StreamReader reader = new(stream);
            string streamContents = reader.ReadToEnd();
            File.WriteAllText(saveLocation, streamContents);
            stream.Dispose();
        }

        static private void SetScenarioMetadata(ScenarioFormData formData)
        {
            SimMissionUIScenarioMetadata md = new()
            {
                InstanceId = GetGUID(),
                SkillLevel = ScenarioHTML.overview.Difficulty,
                LocationDescr = $"{Runway.destRwy.IcaoName} ({Runway.destRwy.IcaoId}) {Runway.destRwy.City}, {Runway.destRwy.Country}",
                DifficultyLevel = 1,
                EstimatedTime = ScenarioHTML.GetDuration(),
                UncompletedImage = "images\\imgM_i.bmp",
                CompletedImage = "images\\imgM_c.bmp",
                MissionBrief = "Overview.htm",
                AbbreviatedMissionBrief = $"{formData.ScenarioTitle}.htm",
                SuccessMessage = $"Success! You completed the \"{formData.ScenarioImageFolder}\" scenario objectives.",
                FailureMessage = $"Better luck next time! You failed to complete the \"{formData.ScenarioImageFolder}\" scenario objectives.",
                UserCrashMessage = $"Yikes! You crashed and therefore failed the \"{formData.ScenarioImageFolder}\" scenario objectives."
            };
            simBaseDocumentXML.WorldBaseFlight.SimMissionUIScenarioMetadata = md;
        }

        static private void SetScenarioVariable(string descr, string name, string value)
        {
            TriggerCondition tc = new()
            {
                Actions = [],
                TriggerValue = new()
            };
			SimMissionScenarioVariable sv = new([tc], GetGUID(), "", descr, name, value);
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionScenarioVariable != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionScenarioVariable.Add(sv);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionScenarioVariable = [sv];
        }

        static private void SetScenarioVariableAction(string objName, string orSearch, int tcIndex, string tSearch)
        {
			ObjectReference or = GetObjectReference(objName, orSearch);
            List<ObjectReference> orList = [or];
            Actions a = new(orList);
            List<Actions> aList = [a];
            int idIndex;
            idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionScenarioVariable.FindIndex(o => o.Descr == tSearch);
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionScenarioVariable[idIndex].TriggerCondition[tcIndex].Actions.Count != 0)
				simBaseDocumentXML.WorldBaseFlight.SimMissionScenarioVariable[idIndex].TriggerCondition[tcIndex].Actions[0].ObjectReference.Add(or);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionScenarioVariable[idIndex].TriggerCondition[tcIndex].Actions = aList;
        }

        static private void SetScenarioVariableTriggerValue(double value, int tcIndex, string tSearch)
        {
            Constant constant = new(value);
            TriggerValue tv = new(constant);
            int idIndex;
            idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionScenarioVariable.FindIndex(o => o.Descr == tSearch);
            if (value == 0) // reset trigger value to NULL
                simBaseDocumentXML.WorldBaseFlight.SimMissionScenarioVariable[idIndex].TriggerCondition = null;
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionScenarioVariable[idIndex].TriggerCondition[tcIndex].TriggerValue = tv;
        }

        static private void SetSignWritingCSS(ScenarioFormData formData)
        {
            string signWritingCSS;

            Stream stream = Form.GetResourceStream("CSS.styleSignWriting.css");
            StreamReader reader = new(stream);
            signWritingCSS = reader.ReadToEnd();
            string saveLocation = $"{formData.ScenarioImageFolder}\\styleSignWriting.css";
            File.WriteAllText(saveLocation, signWritingCSS);
            stream.Dispose();
        }

        static private void SetSignWritingHTML(ScenarioFormData formData)
        {
            string signWritingHTML;
            double canvasWidth;
            double canvasHeight;

            Stream stream = Form.GetResourceStream("HTML.SignWriting.html");
            StreamReader reader = new(stream);
            signWritingHTML = reader.ReadToEnd();

            // Each character approx 80 pixels wide + 20 pixels padding before it, then extra 20 pixels at end of message
            canvasWidth = (formData.SignMessage.Length * 100) + 20;
            signWritingHTML = signWritingHTML.Replace("canvasWidthX", canvasWidth.ToString());
            // Each character approx 160 pixels high + 20 pixels above it and 20 pixels below it
            canvasHeight = 200;
            signWritingHTML = signWritingHTML.Replace("canvasHeightX", canvasHeight.ToString());
            signWritingHTML = signWritingHTML.Replace("mapNorthX", (Runway.startRwy.AirportLat + formData.SignSegmentLength * 4).ToString());
            signWritingHTML = signWritingHTML.Replace("mapEastX", (Runway.startRwy.AirportLon + formData.SignSegmentLength * (3 * formData.SignMessage.Length - 1)).ToString());
            signWritingHTML = signWritingHTML.Replace("mapSouthX", Runway.startRwy.AirportLat.ToString());
            signWritingHTML = signWritingHTML.Replace("mapWestX", Runway.startRwy.AirportLon.ToString());
            signWritingHTML = signWritingHTML.Replace("messageLengthX", formData.SignMessage.Length.ToString());
            signWritingHTML = signWritingHTML.Replace("magVarX", Runway.startRwy.MagVar.ToString());
            string topPixels = "0,";
            string leftPixels = "0,";
            string bearings = "0,";
            Gate gate;
            for (int index = 1; index <= SignWriting.gates.Count; index++)
            {
                gate = SignWriting.gates[index - 1];
                topPixels += gate.topPixels.ToString();
                leftPixels += gate.leftPixels.ToString();
                bearings += gate.orientation.ToString();
                if (index <= SignWriting.gates.Count - 1)
                {
                    topPixels += ",";
                    leftPixels += ",";
                    bearings += ",";
                }
            }
            signWritingHTML = signWritingHTML.Replace("gateTopPixelsX", topPixels);
            signWritingHTML = signWritingHTML.Replace("gateLeftPixelsX", leftPixels);
            signWritingHTML = signWritingHTML.Replace("gateBearingsX", bearings);
            string saveLocation = $"{formData.ScenarioImageFolder}\\htmlSignWriting.html";
            File.WriteAllText(saveLocation, signWritingHTML);
            stream.Dispose();
        }

        static private void SetSignWritingJS(ScenarioFormData formData)
        {
            string signWritingJS;

            Stream stream = Form.GetResourceStream("Javascript.scriptsSignWriting.js");
            StreamReader reader = new(stream);
            signWritingJS = reader.ReadToEnd();
            string saveLocation = $"{formData.ScenarioImageFolder}\\scriptsSignWriting.js";
            File.WriteAllText(saveLocation, signWritingJS);
            stream.Dispose();
        }

        static private void SetSignWritingScriptActions()
        {
            List<SimMissionScriptAction> saList = [];
            saList.Add(new SimMissionScriptAction("ScriptAction01", "!lua local var smokeOn = varget(\"S:smokeOn\", \"NUMBER\") " +
                "if smokeOn == 1 then varset(\"S:smokeOn\", \"NUMBER\", 0) " +
                "else varset(\"S:smokeOn\", \"NUMBER\", 1) end", GetGUID(), ""));
            saList.Add(new SimMissionScriptAction("ScriptAction02", "!lua local var currentGateNo = varget(\"S:currentGateNo\", \"NUMBER\") " +
                "currentGateNo = currentGateNo + 1 varset(\"S:currentGateNo\", \"NUMBER\", currentGateNo)", GetGUID(), ""));
            simBaseDocumentXML.WorldBaseFlight.SimMissionScriptAction = saList;
        }

        static private void SetTimerTrigger(string descr, double stopTime, string timer, string activated)
        {
            List<ObjectReference> orList = [];
            SimMissionTimerTrigger tt = new(descr, stopTime, timer, activated, GetGUID(), new Actions(orList));
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionTimerTrigger != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionTimerTrigger.Add(tt);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionTimerTrigger = [tt];
        }

		static private void SetTimerTriggerAction(string objName, string orSearch, string tSearch)
		{
            ObjectReference or = GetObjectReference(objName, orSearch);
            int idIndex;
            idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionTimerTrigger.FindIndex(o => o.Descr == tSearch);
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionTimerTrigger[idIndex].Actions != null)
				simBaseDocumentXML.WorldBaseFlight.SimMissionTimerTrigger[idIndex].Actions.ObjectReference.Add(or);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionTimerTrigger[idIndex].Actions = new Actions([or]);
        }

        static private void SetTourScriptActions()
        {
            List<SimMissionScriptAction> saList = [];
            saList.Add(new SimMissionScriptAction("ScriptAction01", "!lua local var currentLegNo = varget(\"S:currentLegNo\", \"NUMBER\") " +
                "currentLegNo = currentLegNo + 1 varset(\"S:currentLegNo\", \"NUMBER\", currentLegNo)", GetGUID(), ""));
            simBaseDocumentXML.WorldBaseFlight.SimMissionScriptAction = saList;
        }

        static private void SetUIPanelWindow(int index, string descr, string locked, string mouseI, string panel, string docked, string keyboardI)
        {
            descr = $"{descr}{index:00}";
            SimMissionUIPanelWindow upw = new(descr, locked, mouseI, GetGUID(), panel, docked, keyboardI);
            if (simBaseDocumentXML.WorldBaseFlight.SimMissionUIPanelWindow != null)
                simBaseDocumentXML.WorldBaseFlight.SimMissionUIPanelWindow.Add(upw);
            else
                simBaseDocumentXML.WorldBaseFlight.SimMissionUIPanelWindow = [upw];
        }

        static private void SetWikiTourJS(ScenarioFormData formData)
        {
            string saveLocation = $"{formData.ScenarioImageFolder}\\scriptsWikipediaItem.js";
            Stream stream = Form.GetResourceStream("Javascript.scriptsWikipediaItem.js");
            StreamReader reader = new(stream);
            string wikipediaJS = reader.ReadToEnd();
            string itemURLs = "\"https://en.wikipedia.org" + Wikipedia.WikiTour[1].itemURL + "\"";
            for (int legNo = 2; legNo < Wikipedia.WikiCount - 1; legNo++)
            {
                itemURLs += ", " + "\"https://en.wikipedia.org" + Wikipedia.WikiTour[legNo].itemURL + "\"";
            }
            // double up last url to display while travelling from last item to destination airport
            itemURLs += ", " + "\"https://en.wikipedia.org" + Wikipedia.WikiTour[Wikipedia.WikiCount - 2].itemURL + "\"";
            wikipediaJS = wikipediaJS.Replace("itemURLsX", itemURLs);
            wikipediaJS = wikipediaJS.Replace("itemHREFsX", SetWikiTourAllLegHREFsJS());
            wikipediaJS = wikipediaJS.Replace("widthX", formData.WikiURLWindowWidth.ToString());
            wikipediaJS = wikipediaJS.Replace("heightX", (formData.WikiURLWindowHeight - 50).ToString());
            File.WriteAllText(saveLocation, wikipediaJS);
            stream.Dispose();
        }

        static private string SetWikiTourAllLegHREFsJS()
        {
            string hrefs = SetWikiTourOneLegHREFsJS(1);
            for (int legNo = 2; legNo < Wikipedia.WikiCount - 1; legNo++)
            {
                hrefs += ", " + SetWikiTourOneLegHREFsJS(legNo);
            }
            // double up last url to display while travelling from last item to destination airport
            hrefs += ", " + SetWikiTourOneLegHREFsJS(Wikipedia.WikiCount - 2);
            return hrefs;
        }

        static private string SetWikiTourOneLegHREFsJS(int legIndex)
        {
            int noHREFs = Wikipedia.WikiTour[legIndex].hrefs.Count;
            if (noHREFs == 0)
                return "";
            string itemHREFs = $"[";
            itemHREFs += $"\"{Wikipedia.WikiTour[legIndex].hrefs[0]}\"";
            for (int hrefNo = 1; hrefNo < noHREFs - 1; hrefNo++)
            {
                itemHREFs += ", " + $"\"{Wikipedia.WikiTour[legIndex].hrefs[hrefNo]}\"";
            }
            itemHREFs += "]";
            return itemHREFs;
        }

        #endregion
    }

    #region Simbase.Document class definitions

    [XmlRoot(ElementName = "Actions")]
	public class Actions
	{
		public Actions(List<ObjectReference> v1)
		{
			ObjectReference = v1;
		}

		public Actions()
		{
		}

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "And")]
	public class And
	{

		[XmlElement(ElementName = "GreaterOrEqual")]
		public GreaterOrEqual GreaterOrEqual { get; set; }

		[XmlElement(ElementName = "GreaterThan")]
		public GreaterThan GreaterThan { get; set; }
	}

	[XmlRoot(ElementName = "Areas")]
	public class Areas
	{
		public Areas(List<ObjectReference> v1)
		{
			ObjectReference = v1;
		}

		public Areas()
		{
		}

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "AttachedWorldObject")]
	public class AttachedWorldObject
    {
        public AttachedWorldObject(ObjectReference v1, string v2)
        {
            ObjectReference = v1;
			OffsetXYZ = v2;
        }

        public AttachedWorldObject()
        {
        }

        [XmlElement(ElementName = "ObjectReference")]
		public ObjectReference ObjectReference { get; set; }

		[XmlElement(ElementName = "OffsetXYZ")]
		public string OffsetXYZ { get; set; }
	}

	[XmlRoot(ElementName = "AttachedWorldPosition")]
	public class AttachedWorldPosition
	{
		public AttachedWorldPosition(string v1, string v2)
		{
			WorldPosition = v1;
			AltitudeIsAGL = v2;
		}
		public AttachedWorldPosition()
		{
		}

		[XmlElement(ElementName = "WorldPosition")]
		public string WorldPosition { get; set; }

		[XmlElement(ElementName = "AltitudeIsAGL")]
		public string AltitudeIsAGL { get; set; }
	}

	[XmlRoot(ElementName = "Condition")]
	public class Condition
	{

		[XmlElement(ElementName = "And")]
		public And And { get; set; }
	}

	[XmlRoot(ElementName = "Constant")]
	public class Constant
    {
        public Constant(double v1)
        {
            Double = v1;
        }
        public Constant()
        {
        }

        [XmlElement(ElementName = "Double")]
		public double Double { get; set; }
	}

	[XmlRoot(ElementName = "Goals")]
	public class Goals
	{
		public Goals(List<ObjectReference> v1)
		{
			ObjectReference = v1;
		}
		public Goals()
		{
		}

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "GreaterOrEqual")]
	public class GreaterOrEqual
	{

		[XmlElement(ElementName = "LHS")]
		public LHS LHS { get; set; }

		[XmlElement(ElementName = "RHS")]
		public RHS RHS { get; set; }
	}

	[XmlRoot(ElementName = "GreaterThan")]
	public class GreaterThan
	{

		[XmlElement(ElementName = "LHS")]
		public LHS LHS { get; set; }

		[XmlElement(ElementName = "RHS")]
		public RHS RHS { get; set; }
	}

	[XmlRoot(ElementName = "GroundVehicleAI")]
	public class GroundVehicleAI
	{

		[XmlElement(ElementName = "GroundCruiseSpeed")]
		public double GroundCruiseSpeed { get; set; }

		[XmlElement(ElementName = "GroundTurnSpeed")]
		public double GroundTurnSpeed { get; set; }

		[XmlElement(ElementName = "GroundTurnTime")]
		public double GroundTurnTime { get; set; }

		[XmlElement(ElementName = "YieldToUser")]
		public string YieldToUser { get; set; }

		[XmlElement(ElementName = "WaypointListReference")]
		public string WaypointListReference { get; set; }

		[XmlElement(ElementName = "Unit_Mode")]
		public string UnitMode { get; set; }
	}

	[XmlRoot(ElementName = "LHS")]
	public class LHS
	{

		[XmlElement(ElementName = "Property")]
		public PropertyXML PropertyXML { get; set; }
	}

	[XmlRoot(ElementName = "ObjectReference")]
	public class ObjectReference
	{
		public ObjectReference(string v1)
		{
			InstanceId = v1;
		}

		public ObjectReference()
		{
		}

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "ObjectReferenceList")]
	public class ObjectReferenceList
	{
		public ObjectReferenceList(List<ObjectReference> v1)
		{
			ObjectReference = v1;
		}

		public ObjectReferenceList()
		{
		}

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "OnEnterActions")]
	public class OnEnterActions
	{
		public OnEnterActions(List<ObjectReference> v1)
		{
			ObjectReference = v1;
		}

		public OnEnterActions()
		{
		}

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "OnExitActions")]
	public class OnExitActions
    {
        public OnExitActions(List<ObjectReference> v1)
        {
            ObjectReference = v1;
        }

        public OnExitActions()
        {
        }

        [XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "Property")]
	public class PropertyXML
	{

		[XmlElement(ElementName = "Name")]
		public string Name { get; set; }

		[XmlElement(ElementName = "Units")]
		public string Units { get; set; }

		[XmlElement(ElementName = "ObjectReference")]
		public ObjectReference ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "RHS")]
	public class RHS
	{

		[XmlElement(ElementName = "Constant")]
		public Constant Constant { get; set; }
    }

    [XmlRoot(ElementName = "SetWindowLocation")]
    public class SetWindowLocation
    {
        public SetWindowLocation(string v1, string v2)
        {
            LocationX = v1;
            LocationY = v2;
        }
        public SetWindowLocation()
        {
        }

        [XmlElement(ElementName = "LocationX")]
        public string LocationX { get; set; }

        [XmlElement(ElementName = "LocationY")]
        public string LocationY { get; set; }
    }

    [XmlRoot(ElementName = "SetWindowSize")]
	public class SetWindowSize
	{
		public SetWindowSize(string v1, string v2)
		{
			WindowWidth = v1;
			WindowHeight = v2;
		}
		public SetWindowSize()
		{
		}

		[XmlElement(ElementName = "WindowWidth")]
		public string WindowWidth { get; set; }

		[XmlElement(ElementName = "WindowHeight")]
		public string WindowHeight { get; set; }
	}

	[XmlRoot(ElementName = "Waypoint")]
	public class Waypoint
	{

		[XmlElement(ElementName = "AltitudeIsAGL")]
		public string AltitudeIsAGL { get; set; }

		[XmlElement(ElementName = "WorldPosition")]
		public string WorldPosition { get; set; }

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "WaypointID")]
		public int WaypointID { get; set; }

		[XmlElement(ElementName = "Orientation")]
		public string Orientation { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "SpeedKnots")]
		public double SpeedKnots { get; set; }
	}

	[XmlRoot(ElementName = "SceneryObjects.LibraryObject")]
	public class SceneryObjectsLibraryObject
	{
		public SceneryObjectsLibraryObject(string v1, string v2, string v3, string v4, string v5, string v6, string v7, string v8)
		{
			Descr = v1;
			MDLGuid = v2;
			WorldPosition = v3;
			Orientation = v4;
			AltitudeIsAGL = v5;
			Scale = v6;
			InstanceId = v7;
			Activated = v8;
		}

		public SceneryObjectsLibraryObject()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "MDLGuid")]
		public string MDLGuid { get; set; }

		[XmlElement(ElementName = "WorldPosition")]
		public string WorldPosition { get; set; }

		[XmlElement(ElementName = "Orientation")]
		public string Orientation { get; set; }

		[XmlElement(ElementName = "AltitudeIsAGL")]
		public string AltitudeIsAGL { get; set; }

		[XmlElement(ElementName = "Scale")]
		public string Scale { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }
	}

	[XmlRoot(ElementName = "SimBase.Document")]
	public class SimBaseDocumentXML
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Title")]
		public string Title { get; set; }

		[XmlElement(ElementName = "WorldBase.Flight")]
		public WorldBaseFlight WorldBaseFlight { get; set; }

		[XmlElement(ElementName = "MissionBuilder.MissionBuilder")]
		public object MissionBuilderMissionBuilder { get; set; }

		[XmlElement(ElementName = "WorldBase.AreasOfInterest")]
		public object WorldBaseAreasOfInterest { get; set; }

		[XmlElement(ElementName = "WorldBase.Waypoints")]
		public WorldBaseWaypoints WorldBaseWaypoints { get; set; }

		[XmlAttribute(AttributeName = "Type")]
		public string Type { get; set; }

		[XmlAttribute(AttributeName = "version")]
		public double Version { get; set; }
	}

	[XmlRoot(ElementName = "SimContain.Container")]
	public class SimContainContainer
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "WorldPosition")]
		public string WorldPosition { get; set; }

		[XmlElement(ElementName = "Orientation")]
		public string Orientation { get; set; }

		[XmlElement(ElementName = "ContainerTitle")]
		public string ContainerTitle { get; set; }

		[XmlElement(ElementName = "ContainerID")]
		public int ContainerID { get; set; }

		[XmlElement(ElementName = "IdentificationNumber")]
		public int IdentificationNumber { get; set; }

		[XmlElement(ElementName = "IsOnGround")]
		public string IsOnGround { get; set; }

		[XmlElement(ElementName = "AIType")]
		public string AIType { get; set; }

		[XmlElement(ElementName = "GroundVehicleAI")]
		public GroundVehicleAI GroundVehicleAI { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimContain.WaypointList")]
	public class SimContainWaypointList
	{

		[XmlElement(ElementName = "WrapWaypoints")]
		public string WrapWaypoints { get; set; }

		[XmlElement(ElementName = "CurrentWaypoint")]
		public int CurrentWaypoint { get; set; }

		[XmlElement(ElementName = "BackupToFirst")]
		public string BackupToFirst { get; set; }

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Waypoint")]
		public List<Waypoint> Waypoint { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.AirportLandingTrigger")]
	public class SimMissionAirportLandingTrigger
    {
        public SimMissionAirportLandingTrigger(string v1, string v2, string v3, Actions v4, string v5, string v6, RunwayFilter v7)
        {
            Descr = v1;
            LandingType = v2;
            Activated = v3;
            Actions = v4;
            InstanceId = v5;
            AirportIdent = v6;
            RunwayFilter = v7;
        }

        public SimMissionAirportLandingTrigger()
        {
        }
	
		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "LandingType")]
		public string LandingType { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlElement(ElementName = "Actions")]
		public Actions Actions { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "AirportIdent")]
		public string AirportIdent { get; set; }

		[XmlElement(ElementName = "RunwayFilter")]
		public RunwayFilter RunwayFilter { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.AreaLandingTrigger")]
	public class SimMissionAreaLandingTrigger
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "LandingType")]
		public string LandingType { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlElement(ElementName = "Actions")]
		public Actions Actions { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "Areas")]
		public Areas Areas { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.CloseWindowAction")]
	public class SimMissionCloseWindowAction
	{
		public SimMissionCloseWindowAction(string v1, ObjectReference v2, string v3)
		{
			Descr = v1;
			ObjectReference = v2;
			InstanceId = v3;
		}

		public SimMissionCloseWindowAction()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "ObjectReference")]
		public ObjectReference ObjectReference { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.CylinderArea")]
	public class SimMissionCylinderArea
	{
		public SimMissionCylinderArea(string v1, string v2, string v3, string v4, string v5, AttachedWorldPosition v6, string v7)
		{
			Descr = v1;
			Orientation = v2;
			AreaRadius = v3;
			Height = v4;
			DrawStyle = v5;
			AttachedWorldPosition = v6;
			InstanceId = v7;
		}

		public SimMissionCylinderArea()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Orientation")]
		public string Orientation { get; set; }

		[XmlElement(ElementName = "AreaRadius")]
		public string AreaRadius { get; set; }

		[XmlElement(ElementName = "Height")]
		public string Height { get; set; }

		[XmlElement(ElementName = "DrawStyle")]
		public string DrawStyle { get; set; }

		[XmlElement(ElementName = "AttachedWorldPosition")]
		public AttachedWorldPosition AttachedWorldPosition { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.DialogAction")]
	public class SimMissionDialogAction
	{
		public SimMissionDialogAction(string v1, string v2, string v3, string v4, string v5)
		{
			Descr = v1;
			Text = v2;
			DelaySeconds = v3;
			SoundType = v4;
			InstanceId = v5;
		}
		public SimMissionDialogAction()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Text")]
		public string Text { get; set; }

		[XmlElement(ElementName = "DelaySeconds")]
		public string DelaySeconds { get; set; }

		[XmlElement(ElementName = "SoundType")]
		public string SoundType { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.Goal")]
	public class SimMissionGoal
	{
		public SimMissionGoal(string v1, string v2, string v3)
		{
			Descr = v1;
			Text = v2;
			InstanceId = v3;
		}

		public SimMissionGoal()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Text")]
		public string Text { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.GoalResolutionAction")]
	public class SimMissionGoalResolutionAction
    {
        public SimMissionGoalResolutionAction(string v1, string v2, Goals v3, string v4)
        {
            GoalResolution = v1;
            Descr = v2;
            Goals = v3;
            InstanceId = v4;
        }

        public SimMissionGoalResolutionAction()
        {
        }

        [XmlElement(ElementName = "GoalResolution")]
		public string GoalResolution { get; set; }

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Goals")]
		public Goals Goals { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.ObjectActivationAction")]
	public class SimMissionObjectActivationAction
    {
        public SimMissionObjectActivationAction(string v1, ObjectReferenceList v2, string v3, string v4)
        {
            Descr = v1;
            ObjectReferenceList = v2;
            InstanceId = v3;
            NewObjectState = v4;
        }

        public SimMissionObjectActivationAction()
        {
        }

        [XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "ObjectReferenceList")]
		public ObjectReferenceList ObjectReferenceList { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "NewObjectState")]
		public string NewObjectState { get; set; }

	}

	[XmlRoot(ElementName = "SimMission.OneShotSoundAction")]
	public class SimMissionOneShotSoundAction
	{
        public SimMissionOneShotSoundAction(string v1, string v2, string v3)
        {
			Descr = v1;
			SoundFileName = v2;
			InstanceId = v3;
		}
		public SimMissionOneShotSoundAction()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "SoundFileName")]
		public string SoundFileName { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
    }

    [XmlRoot(ElementName = "SimMission.OnScreenText")]
    public class SimMissionOnScreenText
    {
        public SimMissionOnScreenText(string v1, string v2, string v3, string v4, string v5, string v6, string v7)
        {
            Descr = v1;
            Text = v2;
            OnScreenTextDisplayLocation = v3;
            RGBColor = v4;
            Activated = v5;
            OnScreenTextBackgroundColor = v6;
            InstanceId = v7;
        }

        public SimMissionOnScreenText()
        {
        }

        [XmlElement(ElementName = "Descr")]
        public string Descr { get; set; }

        [XmlElement(ElementName = "Text")]
        public string Text { get; set; }

        [XmlElement(ElementName = "OnScreenTextDisplayLocation")]
        public string OnScreenTextDisplayLocation { get; set; }

        [XmlElement(ElementName = "RGBColor")]
        public string RGBColor { get; set; }

        [XmlElement(ElementName = "Activated")]
        public string Activated { get; set; }

        [XmlElement(ElementName = "OnScreenTextBackgroundColor")]
        public string OnScreenTextBackgroundColor { get; set; }

        [XmlAttribute(AttributeName = "InstanceId")]
        public string InstanceId { get; set; }
    }

    [XmlRoot(ElementName = "SimMission.OpenWindowAction")]
	public class SimMissionOpenWindowAction
	{
		public SimMissionOpenWindowAction(string v1, SetWindowSize v2, SetWindowLocation v3, string v4, ObjectReference v5, string v6)
		{
			Descr = v1;
			SetWindowSize = v2;
            SetWindowLocation = v3;
            RelativeTo = v4;
			ObjectReference = v5;
			InstanceId = v6;
		}

		public SimMissionOpenWindowAction()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "SetWindowSize")]
		public SetWindowSize SetWindowSize { get; set; }

        [XmlElement(ElementName = "SetWindowLocation")]
        public SetWindowLocation SetWindowLocation { get; set; }

        [XmlElement(ElementName = "RelativeTo")]
        public string RelativeTo { get; set; }

        [XmlElement(ElementName = "ObjectReference")]
		public ObjectReference ObjectReference { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.PointOfInterestActivationAction")]
	public class SimMissionPointOfInterestActivationAction
    {
        public SimMissionPointOfInterestActivationAction(string v1, ObjectReferenceList v2, string v3, string v4)
        {
            Descr = v1;
            ObjectReferenceList = v2;
            InstanceId = v3;
            NewObjectState = v4;
        }

        public SimMissionPointOfInterestActivationAction()
        {
        }

        [XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "ObjectReferenceList")]
		public ObjectReferenceList ObjectReferenceList { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "NewObjectState")]
		public string NewObjectState { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.RectangleArea")]
	public class SimMissionRectangleArea
	{
		public SimMissionRectangleArea(string v1, string v2, string v3, string v4, string v5, AttachedWorldPosition v6, string v7)
		{
			Descr = v1;
			Orientation = v2;
			Length = v3;
			Width = v4;
			Height = v5;
			AttachedWorldPosition = v6;
			InstanceId = v7;
		}

		public SimMissionRectangleArea()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Orientation")]
		public string Orientation { get; set; }

		[XmlElement(ElementName = "Length")]
		public string Length { get; set; }

		[XmlElement(ElementName = "Width")]
		public string Width { get; set; }

		[XmlElement(ElementName = "Height")]
		public string Height { get; set; }

		[XmlElement(ElementName = "AttachedWorldPosition")]
		public AttachedWorldPosition AttachedWorldPosition { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "AttachedWorldObject")]
		public AttachedWorldObject AttachedWorldObject { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.RunwayFilter")]
	public class RunwayFilter
	{
		public RunwayFilter(string v1, string v2)
		{
			RunwayNumber = v1;
			RunwayDesignator = v2;
		}

		public RunwayFilter()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "RunwayNumber")]
		public string RunwayNumber { get; set; }

		[XmlElement(ElementName = "RunwayDesignator")]
		public string RunwayDesignator { get; set; }
    }

    [XmlRoot(ElementName = "SimMission.UIPanelWindow")]
    public class SimMissionUIPanelWindow
    {
        public SimMissionUIPanelWindow(string v1, string v2, string v3, string v4, string v5, string v6, string v7)
        {
            Descr = v1;
            Locked = v2;
            HasMouseInteractivity = v3;
            InstanceId = v4;
            UIPanelFileName = v5;
            Docked = v6;
            HasKeyboardInteractivity = v7;
        }

        public SimMissionUIPanelWindow()
        {
        }

        [XmlElement(ElementName = "Descr")]
        public string Descr { get; set; }

        [XmlElement(ElementName = "Locked")]
        public string Locked { get; set; }

        [XmlElement(ElementName = "HasMouseInteractivity")]
        public string HasMouseInteractivity { get; set; }

        [XmlElement(ElementName = "FlashFileName")]
        public string FlashFileName { get; set; }

        [XmlAttribute(AttributeName = "InstanceId")]
        public string InstanceId { get; set; }

        [XmlElement(ElementName = "UIPanelFileName")]
        public string UIPanelFileName { get; set; }

        [XmlElement(ElementName = "Docked")]
        public string Docked { get; set; }

        [XmlElement(ElementName = "HasKeyboardInteractivity")]
        public string HasKeyboardInteractivity { get; set; }
    }

    [XmlRoot(ElementName = "SimMission.ScaleformPanelWindow")]
	public class SimMissionScaleformPanelWindow
	{
		public SimMissionScaleformPanelWindow(string v1, string v2, string v3, string v4, string v5, string v6, string v7, string v8)
		{
			Descr = v1;
			Locked = v2;
			HasMouseInteractivity = v3;
			FlashFileName = v4;
			InstanceId = v5;
			UIPanelFileName = v6;
			Docked = v7;
			HasKeyboardInteractivity = v8;
		}

		public SimMissionScaleformPanelWindow()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Locked")]
		public string Locked { get; set; }

		[XmlElement(ElementName = "HasMouseInteractivity")]
		public string HasMouseInteractivity { get; set; }

		[XmlElement(ElementName = "FlashFileName")]
		public string FlashFileName { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "UIPanelFileName")]
		public string UIPanelFileName { get; set; }

		[XmlElement(ElementName = "Docked")]
		public string Docked { get; set; }

		[XmlElement(ElementName = "HasKeyboardInteractivity")]
		public string HasKeyboardInteractivity { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.PointOfInterest")]
	public class SimMissionPointOfInterest
	{
		public SimMissionPointOfInterest(string v1, string v2, string v3, AttachedWorldObject v4, string v5, string v6, int v7)
		{
			Descr = v1;
			TargetName = v2;
			CurrentSelection = v3;
			AttachedWorldObject = v4;
			InstanceId = v5;
			Activated = v6;
			CycleOrder = v7;
		}

		public SimMissionPointOfInterest()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "TargetName")]
		public string TargetName { get; set; }

		[XmlElement(ElementName = "CurrentSelection")]
		public string CurrentSelection { get; set; }

		[XmlElement(ElementName = "AttachedWorldObject")]
		public AttachedWorldObject AttachedWorldObject { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlElement(ElementName = "CycleOrder")]
		public int CycleOrder { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.PropertyTrigger")]
	public class SimMissionPropertyTrigger
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlElement(ElementName = "Actions")]
		public Actions Actions { get; set; }

		[XmlElement(ElementName = "Condition")]
		public Condition Condition { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.ProximityTrigger")]
	public class SimMissionProximityTrigger
    {
        public SimMissionProximityTrigger(string v1, Areas v2, OnEnterActions v3, string v4, string v5, OnExitActions v6)
        {
            Descr = v1;
            Areas = v2;
            OnEnterActions = v3;
            InstanceId = v4;
            Activated = v5;
            OnExitActions = v6;
        }

        public SimMissionProximityTrigger()
        {
        }

        [XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Areas")]
		public Areas Areas { get; set; }

		[XmlElement(ElementName = "OnEnterActions")]
		public OnEnterActions OnEnterActions { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlElement(ElementName = "OnExitActions")]
		public OnExitActions OnExitActions { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.RealismOverrides")]
	public class SimMissionRealismOverrides
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "UserTips")]
		public string UserTips { get; set; }

		[XmlElement(ElementName = "CrashBehavior")]
		public string CrashBehavior { get; set; }

		[XmlElement(ElementName = "ATCMenuDisabled")]
		public string ATCMenuDisabled { get; set; }

		[XmlElement(ElementName = "FlightRealism")]
		public string FlightRealism { get; set; }

		[XmlElement(ElementName = "WorldRealism")]
		public string WorldRealism { get; set; }

		[XmlElement(ElementName = "UnlimitedFuel")]
		public string UnlimitedFuel { get; set; }

		[XmlElement(ElementName = "AircraftLabels")]
		public string AircraftLabels { get; set; }

		[XmlElement(ElementName = "AvatarNoCollision")]
		public string AvatarNoCollision { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.TimerTrigger")]
	public class SimMissionTimerTrigger
    {
        public SimMissionTimerTrigger(string v1, double v2, string v3, string v4, string v5, Actions v6)
        {
            Descr = v1;
            StopTime = v2;
            OnScreenTimer = v3;
            Activated = v4;
            InstanceId = v5;
            Actions = v6;
        }

        public SimMissionTimerTrigger()
        {
        }

        [XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "StopTime")]
		public double StopTime { get; set; }

		[XmlElement(ElementName = "OnScreenTimer")]
		public string OnScreenTimer { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "Actions")]
		public Actions Actions { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.ScenarioVariable")]
	public class SimMissionScenarioVariable
	{
		public SimMissionScenarioVariable(List<TriggerCondition> v1, string v2, string v3, string v4, string v5, string v6)
		{
			TriggerCondition = v1;
			InstanceId = v2;
			Text = v3;
			Descr = v4;
			Name = v5;
			VariableValue = v6;
		}

		public SimMissionScenarioVariable()
		{
		}

		[XmlElement(ElementName = "TriggerCondition")]
		public List<TriggerCondition> TriggerCondition { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlText]
		public string Text { get; set; }

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Name")]
		public string Name { get; set; }

		[XmlElement(ElementName = "VariableValue")]
		public string VariableValue { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.ScriptAction")]
	public class SimMissionScriptAction
	{
		public SimMissionScriptAction(string v1, string v2, string v3, string v4)
		{
			Descr = v1;
			Script = v2;
			InstanceId = v3;
			Text = v4;
		}

		public SimMissionScriptAction()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Script")]
		public string Script { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlText]
		public string Text { get; set; }
	}

	[XmlRoot(ElementName = "SimMissionUI.ScenarioMetadata")]
	public class SimMissionUIScenarioMetadata
	{
		[XmlElement(ElementName = "SkillLevel")]
		public string SkillLevel { get; set; }

		[XmlElement(ElementName = "LocationDescr")]
		public string LocationDescr { get; set; }

		[XmlElement(ElementName = "DifficultyLevel")]
		public int DifficultyLevel { get; set; }

		[XmlElement(ElementName = "EstimatedTime")]
		public int EstimatedTime { get; set; }

		[XmlElement(ElementName = "UncompletedImage")]
		public string UncompletedImage { get; set; }	

		[XmlElement(ElementName = "CompletedImage")]
		public string CompletedImage { get; set; }

		[XmlElement(ElementName = "ExitMissionImage")]
		public string ExitMissionImage { get; set; }

		[XmlElement(ElementName = "MissionBrief")]
		public string MissionBrief { get; set; }

		[XmlElement(ElementName = "AbbreviatedMissionBrief")]
		public string AbbreviatedMissionBrief { get; set; }

		[XmlElement(ElementName = "SuccessMessage")]
		public string SuccessMessage { get; set; }

		[XmlElement(ElementName = "FailureMessage")]
		public string FailureMessage { get; set; }

		[XmlElement(ElementName = "UserCrashMessage")]
		public string UserCrashMessage { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.DisabledTrafficAirports")]
	public class SimMissionDisabledTrafficAirports
	{
		public SimMissionDisabledTrafficAirports(string v1)
		{
			AirportIdent = v1;
		}

		public SimMissionDisabledTrafficAirports()
		{
		}

		[XmlElement(ElementName = "AirportIdent")]
		public string AirportIdent { get; set; }
	}

	[XmlRoot(ElementName = "TriggerCondition")]
	public class TriggerCondition
    {
        public TriggerCondition(List<Actions> v1, TriggerValue v2)
        {
            Actions = v1;
            TriggerValue = v2;
        }

        public TriggerCondition()
        {
        }

        [XmlElement(ElementName = "Actions")]
		public List<Actions> Actions { get; set; }

		[XmlElement(ElementName = "TriggerValue")]
		public TriggerValue TriggerValue { get; set; }
	}

	[XmlRoot(ElementName = "TriggerValue")]
	public class TriggerValue
    {
        public TriggerValue(Constant v1)
        {
            Constant = v1;
        }

        public TriggerValue()
        {
        }

        [XmlElement(ElementName = "Constant")]
		public Constant Constant { get; set; }
	}

	[XmlRoot(ElementName = "WorldBase.Flight")]
	public class WorldBaseFlight
	{

		[XmlElement(ElementName = "SimContain.Container")]
		public List<SimContainContainer> SimContainContainer { get; set; }

		[XmlElement(ElementName = "SceneryObjects.LibraryObject")]
		public List<SceneryObjectsLibraryObject> SceneryObjectsLibraryObject { get; set; }

		[XmlElement(ElementName = "SimMission.AirportLandingTrigger")]
		public List<SimMissionAirportLandingTrigger> SimMissionAirportLandingTrigger { get; set; }

		[XmlElement(ElementName = "SimMission.AreaLandingTrigger")]
		public List<SimMissionAreaLandingTrigger> SimMissionAreaLandingTrigger { get; set; }

		[XmlElement(ElementName = "SimMission.CloseWindowAction")]
		public List<SimMissionCloseWindowAction> SimMissionCloseWindowAction { get; set; }

		[XmlElement(ElementName = "SimMission.CylinderArea")]
		public List<SimMissionCylinderArea> SimMissionCylinderArea { get; set; }

		[XmlElement(ElementName = "SimMission.DialogAction")]
		public List<SimMissionDialogAction> SimMissionDialogAction { get; set; }

		[XmlElement(ElementName = "SimMission.DisabledTrafficAirports")]
		public SimMissionDisabledTrafficAirports SimMissionDisabledTrafficAirports { get; set; }

		[XmlElement(ElementName = "SimMission.Goal")]
		public List<SimMissionGoal> SimMissionGoal { get; set; }

		[XmlElement(ElementName = "SimMission.GoalResolutionAction")]
		public List<SimMissionGoalResolutionAction> SimMissionGoalResolutionAction { get; set; }

		[XmlElement(ElementName = "SimMission.ObjectActivationAction")]
		public List<SimMissionObjectActivationAction> SimMissionObjectActivationAction { get; set; }

        [XmlElement(ElementName = "SimMission.OneShotSoundAction")]
        public List<SimMissionOneShotSoundAction> SimMissionOneShotSoundAction { get; set; }

        [XmlElement(ElementName = "SimMission.OnScreenText")]
		public List<SimMissionOnScreenText> SimMissionOnScreenText { get; set; }

		[XmlElement(ElementName = "SimMission.OpenWindowAction")]
		public List<SimMissionOpenWindowAction> SimMissionOpenWindowAction { get; set; }

		[XmlElement(ElementName = "SimMission.PointOfInterest")]
		public List<SimMissionPointOfInterest> SimMissionPointOfInterest { get; set; }

		[XmlElement(ElementName = "SimMission.PointOfInterestActivationAction")]
		public List<SimMissionPointOfInterestActivationAction> SimMissionPointOfInterestActivationAction { get; set; }

		[XmlElement(ElementName = "SimMission.PropertyTrigger")]
		public List<SimMissionPropertyTrigger> SimMissionPropertyTrigger { get; set; }

		[XmlElement(ElementName = "SimMission.ProximityTrigger")]
		public List<SimMissionProximityTrigger> SimMissionProximityTrigger { get; set; }

		[XmlElement(ElementName = "SimMission.RealismOverrides")]
		public SimMissionRealismOverrides SimMissionRealismOverrides { get; set; }

		[XmlElement(ElementName = "SimMission.RectangleArea")]
		public List<SimMissionRectangleArea> SimMissionRectangleArea { get; set; }

		[XmlElement(ElementName = "SimMission.ScaleformPanelWindow")]
		public List<SimMissionScaleformPanelWindow> SimMissionScaleformPanelWindow { get; set; }

		[XmlElement(ElementName = "SimMission.ScenarioVariable")]
		public List<SimMissionScenarioVariable> SimMissionScenarioVariable { get; set; }

		[XmlElement(ElementName = "SimMission.ScriptAction")]
		public List<SimMissionScriptAction> SimMissionScriptAction { get; set; }

		[XmlElement(ElementName = "SimMission.TimerTrigger")]
		public List<SimMissionTimerTrigger> SimMissionTimerTrigger { get; set; }

		[XmlElement(ElementName = "SimMissionUI.ScenarioMetadata")]
		public SimMissionUIScenarioMetadata SimMissionUIScenarioMetadata { get; set; }

        [XmlElement(ElementName = "SimMission.UIPanelWindow")]
        public List<SimMissionUIPanelWindow> SimMissionUIPanelWindow { get; set; }
    }

	[XmlRoot(ElementName = "WorldBase.Waypoints")]
	public class WorldBaseWaypoints
	{

		[XmlElement(ElementName = "SimContain.WaypointList")]
		public List<SimContainWaypointList> SimContainWaypointList { get; set; }
	}

	#endregion
}
