using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;

namespace P3D_Scenario_Generator
{
	public class ScenarioXML
    {
		static private readonly double[] circuitHeadingAdj = { 360, 90, 90, 180, 180, 270, 270, 360 };
		private static readonly SimBaseDocumentXML simBaseDocumentXML = new SimBaseDocumentXML();

		static internal void GenerateXMLfile()
		{
			SetSimbaseDocumentXML();
			Gates.SetGates();
			SetWorldBaseFlightXML();
			WriteXML();
		}

		static private void SetSimbaseDocumentXML()
        {
			simBaseDocumentXML.Type = "MissionFile";
			simBaseDocumentXML.Descr = $"This is a {Parameters.SelectedScenario} scenario generated by {Constants.appTitle}. Estimated time to complete: {ScenarioHTML.GetDuration()} minutes.";
			simBaseDocumentXML.Title = $"{ScenarioHTML.GetTitle()}";
			WorldBaseFlight worldBaseFlight = new WorldBaseFlight();
			simBaseDocumentXML.WorldBaseFlight = worldBaseFlight;
        }

		static private void SetWorldBaseFlightXML()
		{
			SetFirstPassObects();
			SetSecondPassObjects();
			SetThirdPassObjects();
			SetFourthPassObjects();
			SetFifthPassObjects();
		}

		static private void SetFirstPassObects()
        {
			SetDialogAction();
			SetDisabledTrafficAirports();
			SetGoal();
			SetLibraryObject();
			SetOneShotSoundAction();
			SetRectangleArea();
			SetScenarioMetadata();
			SetRealismOverrides();
		}

		static private void SetSecondPassObjects()
		{
			SetGoalResolutionAction();
			SetObjectActivationAction();
			SetProximityTrigger();
		}

		static private void SetThirdPassObjects()
        {
			SetAirportLandingTrigger();
			SetTimerTrigger();
		}

		static private void SetFourthPassObjects()
        {
			SetAirportLandingTriggerActivation();
			SetProximityTriggerActivationAction();
		}

		static private void SetFifthPassObjects()
        {
			SetLastGateLandingTrigger();
			SetProximityTriggerOnEnterAction();
			SetTimerTriggerFirstGate();
        }

		#region First pass object creation

		static private void SetDialogAction()
        {
			List<SimMissionDialogAction> daList = new List<SimMissionDialogAction>();
			switch (Parameters.SelectedScenario)
            {
				case nameof(ScenarioTypes.Circuit):
					daList.Add(new SimMissionDialogAction("Dialog_Intro_01", ScenarioHTML.GetBriefing(), "2", "Text-To-Speech", GetGUID()));
					daList.Add(new SimMissionDialogAction("Dialog_Intro_02", ScenarioHTML.GetTips(), "2", "Text-To-Speech", GetGUID()));
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionDialogAction = daList;
		}

		static private void SetDisabledTrafficAirports()
		{
			SimMissionDisabledTrafficAirports ta = new SimMissionDisabledTrafficAirports($"{Runway.IcaoId}");
			simBaseDocumentXML.WorldBaseFlight.SimMissionDisabledTrafficAirports = ta;
		}

		static private void SetGoal()
		{
			List<SimMissionGoal> gList = new List<SimMissionGoal>();
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
					gList.Add(new SimMissionGoal("Goal_01", ScenarioHTML.GetObjective(), GetGUID()));
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionGoal = gList;
		}

		static private void SetLibraryObject()
		{
			List<SceneryObjectsLibraryObject> loList = new List<SceneryObjectsLibraryObject>();
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
					SetGateLibraryObjects(loList, circuitHeadingAdj);
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SceneryObjectsLibraryObject = loList;
		}

		static private void SetOneShotSoundAction()
		{
            List<SimMissionOneShotSoundAction> saList = new List<SimMissionOneShotSoundAction>();
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
					saList.Add(new SimMissionOneShotSoundAction("OneShotSound_ThruHoop_01", "ThruHoop.wav", GetGUID()));
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionOneShotSoundAction = saList;
		}

		static private void SetRealismOverrides()
		{
			SimMissionRealismOverrides ro = new SimMissionRealismOverrides
			{
				Descr = "RealismOverrides",
				UserTips = "UserSpecified",
				CrashBehavior = "UserSpecified",
				ATCMenuDisabled = "False",
				FlightRealism = "UserSpecified",
				WorldRealism = "UserSpecified",
				AircraftLabels = "UserSpecified",
				AvatarNoCollision = "UserSpecified",
				UnlimitedFuel = "UserSpecified"
			};
			simBaseDocumentXML.WorldBaseFlight.SimMissionRealismOverrides = ro;
		}

		static private void SetRectangleArea()
		{
			List<SimMissionRectangleArea> raList = new List<SimMissionRectangleArea>();
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
					SetGateRectangleAreas(raList, circuitHeadingAdj);
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionRectangleArea = raList;
		}

		static private void SetScenarioMetadata()
		{
			SimMissionUIScenarioMetadata md = new SimMissionUIScenarioMetadata
			{
				InstanceId = GetGUID(),
				SkillLevel = ScenarioHTML.GetDifficulty(),
				LocationDescr = $"{Runway.IcaoName} ({Runway.IcaoId}) {Runway.City}, {Runway.Country}",
				DifficultyLevel = 1,
				EstimatedTime = ScenarioHTML.GetDuration(),
				UncompletedImage = "images\\imgM_i.bmp",
				CompletedImage = "images\\imgM_c.bmp",
				ExitMissionImage = "images\\exitMission.bmp",
				MissionBrief = "Overview.htm",
				AbbreviatedMissionBrief = $"{Path.GetFileNameWithoutExtension(Parameters.SaveLocation)}.htm",
				SuccessMessage = $"Success! You completed the \"{Parameters.SelectedScenario}\" scenario objectives.",
				FailureMessage = $"Better luck next time! You failed to complete the \"{Parameters.SelectedScenario}\" scenario objectives.",
				UserCrashMessage = $"Yikes! You crashed and therefore failed the \"{Parameters.SelectedScenario}\" scenario objectives."
			};
			simBaseDocumentXML.WorldBaseFlight.SimMissionUIScenarioMetadata = md;
		}

		#endregion

		#region Second pass object creation/editing

		// Requires 1st pass SetGoal()
		static private void SetGoalResolutionAction()
		{
			List<SimMissionGoalResolutionAction> graList = new List<SimMissionGoalResolutionAction>();
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
					string search = "Goal_01";
					int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionGoal.FindIndex(g => g.Descr == search);
					List<ObjectReference> orList = new List<ObjectReference>
					{
						new ObjectReference(simBaseDocumentXML.WorldBaseFlight.SimMissionGoal[idIndex].InstanceId)
					};
					SimMissionGoalResolutionAction gra = new SimMissionGoalResolutionAction
					{
						Descr = "Resolve_Goal_01",
						GoalResolution = "Completed",
						InstanceId = GetGUID(),
						Goals = new Goals(orList)
					};
					graList.Add(gra);
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionGoalResolutionAction = graList;
		}

		// Requires 1st pass SetLibraryObject()
		static private void SetObjectActivationAction()
		{
			List<SimMissionObjectActivationAction> oaaList = new List<SimMissionObjectActivationAction>();
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
					SetGateObjectActivations(Constants.genGameHoopNumActiveDesc, oaaList, "Activate_Hoop_Active_0", "True");
					SetGateObjectActivations(Constants.genGameHoopNumActiveDesc, oaaList, "Deactivate_Hoop_Active_0", "False");
					SetGateObjectActivations(Constants.genGameHoopNumInactiveDesc, oaaList, "Activate_Hoop_Inactive_0", "True");
					SetGateObjectActivations(Constants.genGameHoopNumInactiveDesc, oaaList, "Deactivate_Hoop_Inactive_0", "False");
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction = oaaList;
		}

		#endregion

		#region Third pass object creation/editing

		// Requires 2nd pass SetGoalResolutionAction()
		static private void SetAirportLandingTrigger()
		{
			RunwayFilter rf = new RunwayFilter("Runway_Filter_01", Runway.Id, "None");
			List<ObjectReference> orList = new List<ObjectReference>();
			SetGoalResolutionReference("Resolve_Goal_0X", 1, orList);
			Actions a = new Actions(orList);
			SimMissionAirportLandingTrigger alt = new SimMissionAirportLandingTrigger
			{
				InstanceId = GetGUID(),
				Descr = "Airport_Landing_Trigger_01",
				Activated = "False",
				AirportIdent = Runway.IcaoId,
				RunwayFilter = rf,
				Actions = a
			};
			List<SimMissionAirportLandingTrigger> altList = new List<SimMissionAirportLandingTrigger>
			{
				alt
			};
			simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger = altList;
		}

		// Requires 2nd pass SetObjectActivationAction()
		static private void SetProximityTrigger()
		{
			List<SimMissionProximityTrigger> ptList = new List<SimMissionProximityTrigger>();
			for (int index = 0; index < Gates.GateCount; index++)
			{
				List<ObjectReference> orAreaList = new List<ObjectReference>();
				SetRectangleAreaReference("Area_Hoop_0X", index + 1, orAreaList);
				Areas a = new Areas(orAreaList);
				List<ObjectReference> orActionList = new List<ObjectReference>();
				SetObjectActivationReference("Activate_Hoop_Inactive_0X", index + 1, orActionList);
				SetObjectActivationReference("Deactivate_Hoop_Active_0X", index + 1, orActionList);
				if (index + 1 < Gates.GateCount)
				{
					SetObjectActivationReference("Activate_Hoop_Active_0X", index + 2, orActionList);
					SetObjectActivationReference("Deactivate_Hoop_Inactive_0X", index + 2, orActionList);
				}
				SetSoundAction("OneShotSound_ThruHoop_0X", 1, orActionList);
				OnEnterActions oea = new OnEnterActions(orActionList);
				SimMissionProximityTrigger pt = new SimMissionProximityTrigger
				{
					InstanceId = GetGUID(),
					Descr = $"Proximity_Trigger_0{index + 1}",
					Activated = "False",
					Areas = a,
					OnEnterActions = oea
				};
				ptList.Add(pt);
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger = ptList;
		}

		// Requires 2nd pass SetObjectActivationAction()
		static private void SetTimerTrigger()
		{
			List<ObjectReference> orList = new List<ObjectReference>();
			SetObjectActivationReference("Activate_Hoop_Active_0X", 1, orList);
			SetObjectActivationReference("Deactivate_Hoop_Inactive_0X", 1, orList);
			SetDialogReference("Dialog_Intro_0X", 1, orList);
			SetDialogReference("Dialog_Intro_0X", 2, orList);
			SimMissionTimerTrigger tt = new SimMissionTimerTrigger
			{
				InstanceId = GetGUID(),
				Descr = "Timer_Trigger_01",
				StopTime = 1.0,
				Activated = "True",
				Actions = new Actions(orList)
			};
			List<SimMissionTimerTrigger> ttList = new List<SimMissionTimerTrigger>
			{
				tt
			};
			simBaseDocumentXML.WorldBaseFlight.SimMissionTimerTrigger = ttList;
		}

		#endregion

		#region Fourth pass object creation/editing

		// Requires 3rd pass SetAirportLandingTrigger()
		static private void SetAirportLandingTriggerActivation()
		{
			string search = "Airport_Landing_Trigger_01";
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger.FindIndex(alt => alt.Descr == search);
			ObjectReference or = new ObjectReference(simBaseDocumentXML.WorldBaseFlight.SimMissionAirportLandingTrigger[idIndex].InstanceId);
			List<ObjectReference> orList = new List<ObjectReference>
			{
				or
			};
			SimMissionObjectActivationAction oaa = new SimMissionObjectActivationAction
			{
				InstanceId = GetGUID(),
				Descr = "Activate_Airport_Landing_Trigger_01",
				NewObjectState = "True",
				ObjectReferenceList = new ObjectReferenceList(orList)
			};
			simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction.Add(oaa);
		}

		// Requires 3rd pass SetProximityTrigger()
		static private void SetProximityTriggerActivationAction()
		{
			List<SimMissionObjectActivationAction> oaaList = new List<SimMissionObjectActivationAction>();
			switch (Parameters.SelectedScenario)
			{
				case nameof(ScenarioTypes.Circuit):
					SetGateTriggerActivations($"Proximity_Trigger_0X", oaaList, "Activate_Proximity_Trigger_0", "True");
					SetGateTriggerActivations($"Proximity_Trigger_0X", oaaList, "Deactivate_Proximity_Trigger_0", "False");
					break;
				default:
					break;
			}
			simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction.AddRange(oaaList);
		}

		#endregion

		#region Fifth pass object creation/editing

		// Requires 4th pass SetAirportLandingTriggerActivation()
		static private void SetLastGateLandingTrigger()
		{
			string search = "Activate_Airport_Landing_Trigger_01";
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction.FindIndex(oa => oa.Descr == search);
			ObjectReference or = new ObjectReference(simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction[idIndex].InstanceId);
			search = $"Proximity_Trigger_0{Gates.GateCount}";
			idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger.FindIndex(pt => pt.Descr == search);
			simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger[idIndex].OnEnterActions.ObjectReference.Add(or);
		}

		// Requires 4th pass SetProximityTriggerActivationAction()
		static private void SetProximityTriggerOnEnterAction()
		{
			for (int index = 0; index < Gates.GateCount; index++)
			{
				List<ObjectReference> orActionList = new List<ObjectReference>();
				SetObjectActivationReference("Deactivate_Proximity_Trigger_0X", index + 1, orActionList);
				if (index + 1 < Gates.GateCount)
				{
					SetObjectActivationReference("Activate_Proximity_Trigger_0X", index + 2, orActionList);
				}
				string search = $"Proximity_Trigger_0X".Replace("X", (index + 1).ToString());
				int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger.FindIndex(pt => pt.Descr == search);
				simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger[idIndex].OnEnterActions.ObjectReference.Add(orActionList[0]);
				if (index + 1 < Gates.GateCount)
				{
					simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger[idIndex].OnEnterActions.ObjectReference.Add(orActionList[1]);
				}
			}
		}

		// Requires 4th pass SetProximityTriggerActivationAction()
		static private void SetTimerTriggerFirstGate()
		{
			string search = "Activate_Proximity_Trigger_01";
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction.FindIndex(pt => pt.Descr == search);
			ObjectReference or = new ObjectReference(simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction[idIndex].InstanceId);
			search = "Timer_Trigger_01";
			idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionTimerTrigger.FindIndex(tt => tt.Descr == search);
			simBaseDocumentXML.WorldBaseFlight.SimMissionTimerTrigger[idIndex].Actions.ObjectReference.Add(or);
		}

		#endregion

		#region Object creation/editing utilities

		static private string GetGUID()
		{
			System.Guid guid = System.Guid.NewGuid();
			string guidUpper = guid.ToString().ToUpper();
			return $"{{{guidUpper}}}";
		}

		static private void SetDialogReference(string objectName, int index, List<ObjectReference> orList)
		{
			string search = objectName.Replace("X", index.ToString());
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionDialogAction.FindIndex(da => da.Descr == search);
			ObjectReference or = new ObjectReference(simBaseDocumentXML.WorldBaseFlight.SimMissionDialogAction[idIndex].InstanceId);
			orList.Add(or);
		}

		static private void SetGateLibraryObjects(List<SceneryObjectsLibraryObject> loList, double[] headingAdj)
		{
			for (int index = 0; index < Gates.GateCount; index++)
			{
				string orientation = SetOrientation(headingAdj[index]);

				// Number objects
				string descr = Constants.genGameNumBlueDesc.Replace("X", (index + 1).ToString());
				string mdlGUID = Constants.genGameNumBlueMDLguid[index];
				double vOffset = Constants.genGameNumBlueVertOffset;
				string worldPosition = SetWorldPosition(Gates.GetGate(index), vOffset);
				loList.Add(new SceneryObjectsLibraryObject(descr, mdlGUID, worldPosition, orientation, "True", "1", GetGUID(), "True"));

				// Hoop active objects
				descr = Constants.genGameHoopNumActiveDesc.Replace("X", (index + 1).ToString());
				mdlGUID = Constants.genGameHoopNumActiveMDLguid;
				vOffset = Constants.genGameHoopNumActiveVertOffset;
				worldPosition = SetWorldPosition(Gates.GetGate(index), vOffset);
				loList.Add(new SceneryObjectsLibraryObject(descr, mdlGUID, worldPosition, orientation, "True", "1", GetGUID(), "False"));

				// Hoop inactive objects
				descr = Constants.genGameHoopNumInactiveDesc.Replace("X", (index + 1).ToString());
				mdlGUID = Constants.genGameHoopNumInactiveMDLguid;
				vOffset = Constants.genGameHoopNumInactiveVertOffset;
				worldPosition = SetWorldPosition(Gates.GetGate(index), vOffset);
				loList.Add(new SceneryObjectsLibraryObject(descr, mdlGUID, worldPosition, orientation, "True", "1", GetGUID(), "True"));
			}
		}

		static private void SetGateObjectActivations(string objectName, List<SimMissionObjectActivationAction> oaaList, string descr, string newObjectState)
		{
			for (int index = 0; index < Gates.GateCount; index++)
			{
				string search = objectName.Replace("X", (index + 1).ToString());
				int idIndex = simBaseDocumentXML.WorldBaseFlight.SceneryObjectsLibraryObject.FindIndex(lo => lo.Descr == search);
				List<ObjectReference> orList = new List<ObjectReference>
				{
					new ObjectReference(simBaseDocumentXML.WorldBaseFlight.SceneryObjectsLibraryObject[idIndex].InstanceId)
				};
				SimMissionObjectActivationAction oaa = new SimMissionObjectActivationAction
				{
					InstanceId = GetGUID(),
					Descr = $"{descr}{index + 1}",
					NewObjectState = newObjectState,
					ObjectReferenceList = new ObjectReferenceList(orList)
				};
				oaaList.Add(oaa);
			}
		}

		static private void SetGateRectangleAreas(List<SimMissionRectangleArea> raList, double[] headingAdj)
		{
			for (int index = 0; index < Gates.GateCount; index++)
			{
				string descr = $"Area_Hoop_0{index + 1}";
				string orientation = SetOrientation(headingAdj[index]);
				double vOffset = Constants.genGameHoopNumActiveVertOffset;
				string worldPosition = SetWorldPosition(Gates.GetGate(index), vOffset);
				AttachedWorldPosition wp = new AttachedWorldPosition(worldPosition, "True");
				raList.Add(new SimMissionRectangleArea(descr, orientation, "100.0", "25.0", "100.0", wp, GetGUID()));
			}
		}

		static private void SetGateTriggerActivations(string objectName, List<SimMissionObjectActivationAction> oaaList, string descr, string newObjectState)
		{
			for (int index = 0; index < Gates.GateCount; index++)
			{
				string search = objectName.Replace("X", (index + 1).ToString());
				int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger.FindIndex(lo => lo.Descr == search);
				ObjectReference or = new ObjectReference(simBaseDocumentXML.WorldBaseFlight.SimMissionProximityTrigger[idIndex].InstanceId);
				List<ObjectReference> orList = new List<ObjectReference>
				{
					or
				};
				ObjectReferenceList orl = new ObjectReferenceList(orList);
				SimMissionObjectActivationAction oaa = new SimMissionObjectActivationAction
				{
					InstanceId = GetGUID(),
					Descr = $"{descr}{index + 1}",
					NewObjectState = newObjectState
				};
				oaa.ObjectReferenceList = orl;
				oaaList.Add(oaa);
			}
		}

		static private void SetGoalResolutionReference(string objectName, int index, List<ObjectReference> orList)
		{
			string search = objectName.Replace("X", index.ToString());
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionGoalResolutionAction.FindIndex(gra => gra.Descr == search);
			ObjectReference or = new ObjectReference(simBaseDocumentXML.WorldBaseFlight.SimMissionGoalResolutionAction[idIndex].InstanceId);
			orList.Add(or);
		}

		static private void SetObjectActivationReference(string objectName, int index, List<ObjectReference> orList)
		{
			string search = objectName.Replace("X", index.ToString());
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction.FindIndex(oaa => oaa.Descr == search);
			ObjectReference or = new ObjectReference(simBaseDocumentXML.WorldBaseFlight.SimMissionObjectActivationAction[idIndex].InstanceId);
			orList.Add(or);
		}

		static private string SetOrientation(double headingAdj)
		{
			return $"0.0,0.0,{string.Format("{0:0.0}", (Runway.Hdg + Runway.MagVar + headingAdj) % 360)}";
		}

		static private void SetRectangleAreaReference(string objectName, int index, List<ObjectReference> orList)
		{
			string search = objectName.Replace("X", index.ToString());
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionRectangleArea.FindIndex(oaa => oaa.Descr == search);
			ObjectReference or = new ObjectReference(simBaseDocumentXML.WorldBaseFlight.SimMissionRectangleArea[idIndex].InstanceId);
			orList.Add(or);
		}

		static private void SetSoundAction(string objectName, int index, List<ObjectReference> orList)
		{
			string search = objectName.Replace("X", index.ToString());
			int idIndex = simBaseDocumentXML.WorldBaseFlight.SimMissionOneShotSoundAction.FindIndex(sa => sa.Descr == search);
			ObjectReference or = new ObjectReference(simBaseDocumentXML.WorldBaseFlight.SimMissionOneShotSoundAction[idIndex].InstanceId);
			orList.Add(or);
		}

		static private string SetWorldPosition(Gate gate, double vertOffset)
		{
			return $"{ScenarioFXML.FormatCoordXML(gate.lat, "N", "S")},{ScenarioFXML.FormatCoordXML(gate.lon, "E", "W")},+{Parameters.Height + vertOffset}";
		}

		#endregion

		static private void WriteXML()
			{
				XmlSerializer xmlSerializer = new XmlSerializer(simBaseDocumentXML.GetType());

				using StreamWriter writer = new StreamWriter(Parameters.SaveLocation.Replace("fxml", "xml"));
				xmlSerializer.Serialize(writer, simBaseDocumentXML);
			}
	}

	#region Simbase.Document class definitions

	[XmlRoot(ElementName = "ObjectReference")]
	public class ObjectReference
	{
		public ObjectReference(string v1)
		{
			InstanceId = v1;
		}
		public ObjectReference()
		{
		}

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "ObjectReferenceList")]
	public class ObjectReferenceList
	{
		public ObjectReferenceList(List<ObjectReference> v1)
		{
			ObjectReference = v1;
		}

		public ObjectReferenceList()
		{
		}

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.ObjectActivationAction")]
	public class SimMissionObjectActivationAction
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "ObjectReferenceList")]
		public ObjectReferenceList ObjectReferenceList { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "NewObjectState")]
		public string NewObjectState { get; set; }

	}

	[XmlRoot(ElementName = "SimMission.PointOfInterestActivationAction")]
	public class SimMissionPointOfInterestActivationAction
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "ObjectReferenceList")]
		public ObjectReferenceList ObjectReferenceList { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "NewObjectState")]
		public string NewObjectState { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.DialogAction")]
	public class SimMissionDialogAction
	{
		public SimMissionDialogAction(string v1, string v2, string v3, string v4, string v5)
		{
			Descr = v1;
			Text = v2;
			DelaySeconds = v3;
			SoundType = v4;
			InstanceId = v5;
		}
		public SimMissionDialogAction()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Text")]
		public string Text { get; set; }

		[XmlElement(ElementName = "DelaySeconds")]
		public string DelaySeconds { get; set; }

		[XmlElement(ElementName = "SoundType")]
		public string SoundType { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.OneShotSoundAction")]
	public class SimMissionOneShotSoundAction
	{
        public SimMissionOneShotSoundAction(string v1, string v2, string v3)
        {
			Descr = v1;
			SoundFileName = v2;
			InstanceId = v3;
		}
		public SimMissionOneShotSoundAction()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "SoundFileName")]
		public string SoundFileName { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
    }

	[XmlRoot(ElementName = "Goals")]
	public class Goals
	{
		public Goals(List<ObjectReference> v1)
		{
			ObjectReference = v1;
		}
		public Goals()
		{
		}

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.GoalResolutionAction")]
	public class SimMissionGoalResolutionAction
	{

		[XmlElement(ElementName = "GoalResolution")]
		public string GoalResolution { get; set; }

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Goals")]
		public Goals Goals { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "AttachedWorldPosition")]
	public class AttachedWorldPosition
	{
		public AttachedWorldPosition(string v1, string v2)
		{
			WorldPosition = v1;
			AltitudeIsAGL = v2;
		}
		public AttachedWorldPosition()
		{
		}

		[XmlElement(ElementName = "WorldPosition")]
		public string WorldPosition { get; set; }

		[XmlElement(ElementName = "AltitudeIsAGL")]
		public string AltitudeIsAGL { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.RectangleArea")]
	public class SimMissionRectangleArea
	{
		public SimMissionRectangleArea(string v1, string v2, string v3, string v4, string v5, AttachedWorldPosition v6, string v7)
		{
			Descr = v1;
			Orientation = v2;
			Length = v3;
			Width = v4;
			Height = v5;
			AttachedWorldPosition = v6;
			InstanceId = v7;
		}
		public SimMissionRectangleArea()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Orientation")]
		public string Orientation { get; set; }

		[XmlElement(ElementName = "Length")]
		public string Length { get; set; }

		[XmlElement(ElementName = "Width")]
		public string Width { get; set; }

		[XmlElement(ElementName = "Height")]
		public string Height { get; set; }

		[XmlElement(ElementName = "AttachedWorldPosition")]
		public AttachedWorldPosition AttachedWorldPosition { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "AttachedWorldObject")]
		public AttachedWorldObject AttachedWorldObject { get; set; }
	}

	[XmlRoot(ElementName = "AttachedWorldObject")]
	public class AttachedWorldObject
	{

		[XmlElement(ElementName = "ObjectReference")]
		public ObjectReference ObjectReference { get; set; }

		[XmlElement(ElementName = "OffsetXYZ")]
		public string OffsetXYZ { get; set; }
	}

	[XmlRoot(ElementName = "Actions")]
	public class Actions
	{
		public Actions(List<ObjectReference> v1)
		{
			ObjectReference = v1;
		}

		public Actions()
		{
		}

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.AreaLandingTrigger")]
	public class SimMissionAreaLandingTrigger
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "LandingType")]
		public string LandingType { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlElement(ElementName = "Actions")]
		public Actions Actions { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "Areas")]
		public Areas Areas { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.AirportLandingTrigger")]
	public class SimMissionAirportLandingTrigger
	{
		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "LandingType")]
		public string LandingType { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlElement(ElementName = "Actions")]
		public Actions Actions { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "AirportIdent")]
		public string AirportIdent { get; set; }

		[XmlElement(ElementName = "RunwayFilter")]
		public RunwayFilter RunwayFilter { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.RunwayFilter")]
	public class RunwayFilter
	{
		public RunwayFilter(string v1, string v2, string v3)
		{
			Descr = v1;
			RunwayNumber = v2;
			RunwayDesignator = v3;
		}

		public RunwayFilter()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "RunwayNumber")]
		public string RunwayNumber { get; set; }

		[XmlElement(ElementName = "RunwayDesignator")]
		public string RunwayDesignator { get; set; }
	}

	[XmlRoot(ElementName = "Areas")]
	public class Areas
	{
		public Areas(List<ObjectReference> v1)
		{
			ObjectReference = v1;
		}

		public Areas()
		{
		}

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "Property")]
	public class PropertyXML
	{

		[XmlElement(ElementName = "Name")]
		public string Name { get; set; }

		[XmlElement(ElementName = "Units")]
		public string Units { get; set; }

		[XmlElement(ElementName = "ObjectReference")]
		public ObjectReference ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "LHS")]
	public class LHS
	{

		[XmlElement(ElementName = "Property")]
		public PropertyXML PropertyXML { get; set; }
	}

	[XmlRoot(ElementName = "Constant")]
	public class Constant
	{

		[XmlElement(ElementName = "Double")]
		public double Double { get; set; }
	}

	[XmlRoot(ElementName = "RHS")]
	public class RHS
	{

		[XmlElement(ElementName = "Constant")]
		public Constant Constant { get; set; }
	}

	[XmlRoot(ElementName = "GreaterOrEqual")]
	public class GreaterOrEqual
	{

		[XmlElement(ElementName = "LHS")]
		public LHS LHS { get; set; }

		[XmlElement(ElementName = "RHS")]
		public RHS RHS { get; set; }
	}

	[XmlRoot(ElementName = "And")]
	public class And
	{

		[XmlElement(ElementName = "GreaterOrEqual")]
		public GreaterOrEqual GreaterOrEqual { get; set; }

		[XmlElement(ElementName = "GreaterThan")]
		public GreaterThan GreaterThan { get; set; }
	}

	[XmlRoot(ElementName = "Condition")]
	public class Condition
	{

		[XmlElement(ElementName = "And")]
		public And And { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.PropertyTrigger")]
	public class SimMissionPropertyTrigger
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlElement(ElementName = "Actions")]
		public Actions Actions { get; set; }

		[XmlElement(ElementName = "Condition")]
		public Condition Condition { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "GreaterThan")]
	public class GreaterThan
	{

		[XmlElement(ElementName = "LHS")]
		public LHS LHS { get; set; }

		[XmlElement(ElementName = "RHS")]
		public RHS RHS { get; set; }
	}

	[XmlRoot(ElementName = "OnEnterActions")]
	public class OnEnterActions
	{
		public OnEnterActions(List<ObjectReference> v1)
		{
			ObjectReference = v1;
		}

		public OnEnterActions()
		{
		}

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.ProximityTrigger")]
	public class SimMissionProximityTrigger
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Areas")]
		public Areas Areas { get; set; }

		[XmlElement(ElementName = "OnEnterActions")]
		public OnEnterActions OnEnterActions { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlElement(ElementName = "OnExitActions")]
		public OnExitActions OnExitActions { get; set; }
	}

	[XmlRoot(ElementName = "OnExitActions")]
	public class OnExitActions
	{

		[XmlElement(ElementName = "ObjectReference")]
		public List<ObjectReference> ObjectReference { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.TimerTrigger")]
	public class SimMissionTimerTrigger
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "StopTime")]
		public double StopTime { get; set; }

		[XmlElement(ElementName = "OnScreenTimer")]
		public string OnScreenTimer { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "Actions")]
		public Actions Actions { get; set; }
	}

	[XmlRoot(ElementName = "SceneryObjects.LibraryObject")]
	public class SceneryObjectsLibraryObject
	{
		public SceneryObjectsLibraryObject(string v1, string v2, string v3, string v4, string v5, string v6, string v7, string v8)
		{
			Descr = v1;
			MDLGuid = v2;
			WorldPosition = v3;
			Orientation = v4;
			AltitudeIsAGL = v5;
			Scale = v6;
			InstanceId = v7;
			Activated = v8;
		}
		public SceneryObjectsLibraryObject()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "MDLGuid")]
		public string MDLGuid { get; set; }

		[XmlElement(ElementName = "WorldPosition")]
		public string WorldPosition { get; set; }

		[XmlElement(ElementName = "Orientation")]
		public string Orientation { get; set; }

		[XmlElement(ElementName = "AltitudeIsAGL")]
		public string AltitudeIsAGL { get; set; }

		[XmlElement(ElementName = "Scale")]
		public string Scale { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }
	}

	[XmlRoot(ElementName = "GroundVehicleAI")]
	public class GroundVehicleAI
	{

		[XmlElement(ElementName = "GroundCruiseSpeed")]
		public double GroundCruiseSpeed { get; set; }

		[XmlElement(ElementName = "GroundTurnSpeed")]
		public double GroundTurnSpeed { get; set; }

		[XmlElement(ElementName = "GroundTurnTime")]
		public double GroundTurnTime { get; set; }

		[XmlElement(ElementName = "YieldToUser")]
		public string YieldToUser { get; set; }

		[XmlElement(ElementName = "WaypointListReference")]
		public string WaypointListReference { get; set; }

		[XmlElement(ElementName = "Unit_Mode")]
		public string UnitMode { get; set; }
	}

	[XmlRoot(ElementName = "SimContain.Container")]
	public class SimContainContainer
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "WorldPosition")]
		public string WorldPosition { get; set; }

		[XmlElement(ElementName = "Orientation")]
		public string Orientation { get; set; }

		[XmlElement(ElementName = "ContainerTitle")]
		public string ContainerTitle { get; set; }

		[XmlElement(ElementName = "ContainerID")]
		public int ContainerID { get; set; }

		[XmlElement(ElementName = "IdentificationNumber")]
		public int IdentificationNumber { get; set; }

		[XmlElement(ElementName = "IsOnGround")]
		public string IsOnGround { get; set; }

		[XmlElement(ElementName = "AIType")]
		public string AIType { get; set; }

		[XmlElement(ElementName = "GroundVehicleAI")]
		public GroundVehicleAI GroundVehicleAI { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.PointOfInterest")]
	public class SimMissionPointOfInterest
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "TargetName")]
		public string TargetName { get; set; }

		[XmlElement(ElementName = "CurrentSelection")]
		public string CurrentSelection { get; set; }

		[XmlElement(ElementName = "AttachedWorldObject")]
		public AttachedWorldObject AttachedWorldObject { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "Activated")]
		public string Activated { get; set; }

		[XmlElement(ElementName = "CycleOrder")]
		public int CycleOrder { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.RealismOverrides")]
	public class SimMissionRealismOverrides
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "UserTips")]
		public string UserTips { get; set; }

		[XmlElement(ElementName = "CrashBehavior")]
		public string CrashBehavior { get; set; }

		[XmlElement(ElementName = "ATCMenuDisabled")]
		public string ATCMenuDisabled { get; set; }

		[XmlElement(ElementName = "FlightRealism")]
		public string FlightRealism { get; set; }

		[XmlElement(ElementName = "WorldRealism")]
		public string WorldRealism { get; set; }

		[XmlElement(ElementName = "UnlimitedFuel")]
		public string UnlimitedFuel { get; set; }

		[XmlElement(ElementName = "AircraftLabels")]
		public string AircraftLabels { get; set; }

		[XmlElement(ElementName = "AvatarNoCollision")]
		public string AvatarNoCollision { get; set; }
	}

	[XmlRoot(ElementName = "SimMissionUI.ScenarioMetadata")]
	public class SimMissionUIScenarioMetadata
	{
		[XmlElement(ElementName = "SkillLevel")]
		public string SkillLevel { get; set; }

		[XmlElement(ElementName = "LocationDescr")]
		public string LocationDescr { get; set; }

		[XmlElement(ElementName = "DifficultyLevel")]
		public int DifficultyLevel { get; set; }

		[XmlElement(ElementName = "EstimatedTime")]
		public int EstimatedTime { get; set; }

		[XmlElement(ElementName = "UncompletedImage")]
		public string UncompletedImage { get; set; }	

		[XmlElement(ElementName = "CompletedImage")]
		public string CompletedImage { get; set; }

		[XmlElement(ElementName = "ExitMissionImage")]
		public string ExitMissionImage { get; set; }

		[XmlElement(ElementName = "MissionBrief")]
		public string MissionBrief { get; set; }

		[XmlElement(ElementName = "AbbreviatedMissionBrief")]
		public string AbbreviatedMissionBrief { get; set; }

		[XmlElement(ElementName = "SuccessMessage")]
		public string SuccessMessage { get; set; }

		[XmlElement(ElementName = "FailureMessage")]
		public string FailureMessage { get; set; }

		[XmlElement(ElementName = "UserCrashMessage")]
		public string UserCrashMessage { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.Goal")]
	public class SimMissionGoal
	{
		public SimMissionGoal(string v1, string v2, string v3)
		{
			Descr = v1;
			Text = v2;
			InstanceId = v3;
		}

		public SimMissionGoal()
		{
		}

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Text")]
		public string Text { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "SimMission.DisabledTrafficAirports")]
	public class SimMissionDisabledTrafficAirports
	{
		public SimMissionDisabledTrafficAirports(string v1)
		{
			AirportIdent = v1;
		}

		public SimMissionDisabledTrafficAirports()
		{
		}

		[XmlElement(ElementName = "AirportIdent")]
		public string AirportIdent { get; set; }
	}

	[XmlRoot(ElementName = "WorldBase.Flight")]
	public class WorldBaseFlight
	{

		[XmlElement(ElementName = "SimMission.ObjectActivationAction")]
		public List<SimMissionObjectActivationAction> SimMissionObjectActivationAction { get; set; }

		[XmlElement(ElementName = "SimMission.PointOfInterestActivationAction")]
		public List<SimMissionPointOfInterestActivationAction> SimMissionPointOfInterestActivationAction { get; set; }

		[XmlElement(ElementName = "SimMission.DialogAction")]
		public List<SimMissionDialogAction> SimMissionDialogAction { get; set; }

		[XmlElement(ElementName = "SimMission.OneShotSoundAction")]
		public List<SimMissionOneShotSoundAction> SimMissionOneShotSoundAction { get; set; }

		[XmlElement(ElementName = "SimMission.GoalResolutionAction")]
		public List<SimMissionGoalResolutionAction> SimMissionGoalResolutionAction { get; set; }

		[XmlElement(ElementName = "SimMission.RectangleArea")]
		public List<SimMissionRectangleArea> SimMissionRectangleArea { get; set; }

		[XmlElement(ElementName = "SimMission.AreaLandingTrigger")]
		public List<SimMissionAreaLandingTrigger> SimMissionAreaLandingTrigger { get; set; }

		[XmlElement(ElementName = "SimMission.AirportLandingTrigger")]
		public List<SimMissionAirportLandingTrigger> SimMissionAirportLandingTrigger { get; set; }

		[XmlElement(ElementName = "SimMission.PropertyTrigger")]
		public List<SimMissionPropertyTrigger> SimMissionPropertyTrigger { get; set; }

		[XmlElement(ElementName = "SimMission.ProximityTrigger")]
		public List<SimMissionProximityTrigger> SimMissionProximityTrigger { get; set; }

		[XmlElement(ElementName = "SimMission.TimerTrigger")]
		public List<SimMissionTimerTrigger> SimMissionTimerTrigger { get; set; }

		[XmlElement(ElementName = "SceneryObjects.LibraryObject")]
		public List<SceneryObjectsLibraryObject> SceneryObjectsLibraryObject { get; set; }

		[XmlElement(ElementName = "SimContain.Container")]
		public List<SimContainContainer> SimContainContainer { get; set; }

		[XmlElement(ElementName = "SimMission.PointOfInterest")]
		public List<SimMissionPointOfInterest> SimMissionPointOfInterest { get; set; }

		[XmlElement(ElementName = "SimMission.RealismOverrides")]
		public SimMissionRealismOverrides SimMissionRealismOverrides { get; set; }

		[XmlElement(ElementName = "SimMissionUI.ScenarioMetadata")]
		public SimMissionUIScenarioMetadata SimMissionUIScenarioMetadata { get; set; }

		[XmlElement(ElementName = "SimMission.Goal")]
		public List<SimMissionGoal> SimMissionGoal { get; set; }

		[XmlElement(ElementName = "SimMission.DisabledTrafficAirports")]
		public SimMissionDisabledTrafficAirports SimMissionDisabledTrafficAirports { get; set; }
	}

	[XmlRoot(ElementName = "Waypoint")]
	public class Waypoint
	{

		[XmlElement(ElementName = "AltitudeIsAGL")]
		public string AltitudeIsAGL { get; set; }

		[XmlElement(ElementName = "WorldPosition")]
		public string WorldPosition { get; set; }

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "WaypointID")]
		public int WaypointID { get; set; }

		[XmlElement(ElementName = "Orientation")]
		public string Orientation { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }

		[XmlElement(ElementName = "SpeedKnots")]
		public double SpeedKnots { get; set; }
	}

	[XmlRoot(ElementName = "SimContain.WaypointList")]
	public class SimContainWaypointList
	{

		[XmlElement(ElementName = "WrapWaypoints")]
		public string WrapWaypoints { get; set; }

		[XmlElement(ElementName = "CurrentWaypoint")]
		public int CurrentWaypoint { get; set; }

		[XmlElement(ElementName = "BackupToFirst")]
		public string BackupToFirst { get; set; }

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Waypoint")]
		public List<Waypoint> Waypoint { get; set; }

		[XmlAttribute(AttributeName = "InstanceId")]
		public string InstanceId { get; set; }
	}

	[XmlRoot(ElementName = "WorldBase.Waypoints")]
	public class WorldBaseWaypoints
	{

		[XmlElement(ElementName = "SimContain.WaypointList")]
		public List<SimContainWaypointList> SimContainWaypointList { get; set; }
	}

	[XmlRoot(ElementName = "SimBase.Document")]
	public class SimBaseDocumentXML
	{

		[XmlElement(ElementName = "Descr")]
		public string Descr { get; set; }

		[XmlElement(ElementName = "Title")]
		public string Title { get; set; }

		[XmlElement(ElementName = "WorldBase.Flight")]
		public WorldBaseFlight WorldBaseFlight { get; set; }

		[XmlElement(ElementName = "MissionBuilder.MissionBuilder")]
		public object MissionBuilderMissionBuilder { get; set; }

		[XmlElement(ElementName = "WorldBase.AreasOfInterest")]
		public object WorldBaseAreasOfInterest { get; set; }

		[XmlElement(ElementName = "WorldBase.Waypoints")]
		public WorldBaseWaypoints WorldBaseWaypoints { get; set; }

		[XmlAttribute(AttributeName = "Type")]
		public string Type { get; set; }

		[XmlAttribute(AttributeName = "version")]
		public double Version { get; set; }
	}

	#endregion
}
